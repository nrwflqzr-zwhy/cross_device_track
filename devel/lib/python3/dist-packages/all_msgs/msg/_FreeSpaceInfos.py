# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/FreeSpaceInfos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class FreeSpaceInfos(genpy.Message):
  _md5sum = "a60987ee9bd368f8db4ac0adf7d909b0"
  _type = "all_msgs/FreeSpaceInfos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point3f[]        fs_pts
std_msgs/Float32[] fs_confidence 

================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['fs_pts','fs_confidence']
  _slot_types = ['all_msgs/Point3f[]','std_msgs/Float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fs_pts,fs_confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FreeSpaceInfos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fs_pts is None:
        self.fs_pts = []
      if self.fs_confidence is None:
        self.fs_confidence = []
    else:
      self.fs_pts = []
      self.fs_confidence = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.fs_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.fs_pts:
        _v1 = val1.x
        _x = _v1.data
        buff.write(_get_struct_f().pack(_x))
        _v2 = val1.y
        _x = _v2.data
        buff.write(_get_struct_f().pack(_x))
        _v3 = val1.z
        _x = _v3.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.fs_confidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.fs_confidence:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fs_pts is None:
        self.fs_pts = None
      if self.fs_confidence is None:
        self.fs_confidence = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fs_pts = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v4 = val1.x
        start = end
        end += 4
        (_v4.data,) = _get_struct_f().unpack(str[start:end])
        _v5 = val1.y
        start = end
        end += 4
        (_v5.data,) = _get_struct_f().unpack(str[start:end])
        _v6 = val1.z
        start = end
        end += 4
        (_v6.data,) = _get_struct_f().unpack(str[start:end])
        self.fs_pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fs_confidence = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.fs_confidence.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.fs_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.fs_pts:
        _v7 = val1.x
        _x = _v7.data
        buff.write(_get_struct_f().pack(_x))
        _v8 = val1.y
        _x = _v8.data
        buff.write(_get_struct_f().pack(_x))
        _v9 = val1.z
        _x = _v9.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.fs_confidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.fs_confidence:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fs_pts is None:
        self.fs_pts = None
      if self.fs_confidence is None:
        self.fs_confidence = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fs_pts = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v10 = val1.x
        start = end
        end += 4
        (_v10.data,) = _get_struct_f().unpack(str[start:end])
        _v11 = val1.y
        start = end
        end += 4
        (_v11.data,) = _get_struct_f().unpack(str[start:end])
        _v12 = val1.z
        start = end
        end += 4
        (_v12.data,) = _get_struct_f().unpack(str[start:end])
        self.fs_pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fs_confidence = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.fs_confidence.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
