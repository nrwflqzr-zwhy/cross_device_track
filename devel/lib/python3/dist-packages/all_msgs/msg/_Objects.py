# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/Objects.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class Objects(genpy.Message):
  _md5sum = "af808db5c14ee51e1e18c9cd6b126641"
  _type = "all_msgs/Objects"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Object[]         objects
================================================================================
MSG: all_msgs/Object
CoreInfo coreinfo
std_msgs/Bool  hassupplmentinfo 
SupplementInfo supplementinfo 

================================================================================
MSG: all_msgs/CoreInfo
std_msgs/Float64 timestamp

std_msgs/Int32 priority_id
std_msgs/Float32 exist_confidence 
Point3f          center 
Point3f          center_cov 
Point3f          size 
Point3f          size_cov 
Point3f          direction 
Point3f          direction_cov         
std_msgs/Int32   type 
std_msgs/Float32 type_confidence 
std_msgs/Int32   attention_type 
std_msgs/Int32   motion_state
std_msgs/Int32   lane_pos
std_msgs/Int32   trakcer_id 
std_msgs/Float64 age 
Point3f          velocity 
Point3f          velocity_cov 
Point3f          acceleration 
Point3f          acceleration_cov 
std_msgs/Float32 angle_velocity 
std_msgs/Float32 angle_velocity_cov 
std_msgs/Float32 angle_acceleration 
std_msgs/Float32 angle_acceleration_cov  
Point3f          anchor 
Point3f          nearest_point 


================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: all_msgs/SupplementInfo
std_msgs/UInt32     unique_id

Point3f[]           polygon
std_msgs/Int32      left_point_index 
std_msgs/Int32      right_point_index 

std_msgs/Int32[]    cloud_indices

std_msgs/Float32[]  latent_types
std_msgs/Int32      size_type 
std_msgs/Int32      mode 
std_msgs/Bool       in_roi 
std_msgs/Int32      tracking_state
Point3f             geo_center 
Point3f             geo_size 



Point3f[]           trajectory 
Point3f[]           history_velocity
std_msgs/Int32[]    history_type 
std_msgs/Int32      gps_mode 
Point3d             gps_info 

================================================================================
MSG: std_msgs/UInt32
uint32 data
================================================================================
MSG: all_msgs/Point3d
std_msgs/Float64 x 
std_msgs/Float64 y 
std_msgs/Float64 z 
"""
  __slots__ = ['objects']
  _slot_types = ['all_msgs/Object[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Objects, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.objects is None:
        self.objects = []
    else:
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.coreinfo
        _v2 = _v1.timestamp
        _x = _v2.data
        buff.write(_get_struct_d().pack(_x))
        _v3 = _v1.priority_id
        _x = _v3.data
        buff.write(_get_struct_i().pack(_x))
        _v4 = _v1.exist_confidence
        _x = _v4.data
        buff.write(_get_struct_f().pack(_x))
        _v5 = _v1.center
        _v6 = _v5.x
        _x = _v6.data
        buff.write(_get_struct_f().pack(_x))
        _v7 = _v5.y
        _x = _v7.data
        buff.write(_get_struct_f().pack(_x))
        _v8 = _v5.z
        _x = _v8.data
        buff.write(_get_struct_f().pack(_x))
        _v9 = _v1.center_cov
        _v10 = _v9.x
        _x = _v10.data
        buff.write(_get_struct_f().pack(_x))
        _v11 = _v9.y
        _x = _v11.data
        buff.write(_get_struct_f().pack(_x))
        _v12 = _v9.z
        _x = _v12.data
        buff.write(_get_struct_f().pack(_x))
        _v13 = _v1.size
        _v14 = _v13.x
        _x = _v14.data
        buff.write(_get_struct_f().pack(_x))
        _v15 = _v13.y
        _x = _v15.data
        buff.write(_get_struct_f().pack(_x))
        _v16 = _v13.z
        _x = _v16.data
        buff.write(_get_struct_f().pack(_x))
        _v17 = _v1.size_cov
        _v18 = _v17.x
        _x = _v18.data
        buff.write(_get_struct_f().pack(_x))
        _v19 = _v17.y
        _x = _v19.data
        buff.write(_get_struct_f().pack(_x))
        _v20 = _v17.z
        _x = _v20.data
        buff.write(_get_struct_f().pack(_x))
        _v21 = _v1.direction
        _v22 = _v21.x
        _x = _v22.data
        buff.write(_get_struct_f().pack(_x))
        _v23 = _v21.y
        _x = _v23.data
        buff.write(_get_struct_f().pack(_x))
        _v24 = _v21.z
        _x = _v24.data
        buff.write(_get_struct_f().pack(_x))
        _v25 = _v1.direction_cov
        _v26 = _v25.x
        _x = _v26.data
        buff.write(_get_struct_f().pack(_x))
        _v27 = _v25.y
        _x = _v27.data
        buff.write(_get_struct_f().pack(_x))
        _v28 = _v25.z
        _x = _v28.data
        buff.write(_get_struct_f().pack(_x))
        _v29 = _v1.type
        _x = _v29.data
        buff.write(_get_struct_i().pack(_x))
        _v30 = _v1.type_confidence
        _x = _v30.data
        buff.write(_get_struct_f().pack(_x))
        _v31 = _v1.attention_type
        _x = _v31.data
        buff.write(_get_struct_i().pack(_x))
        _v32 = _v1.motion_state
        _x = _v32.data
        buff.write(_get_struct_i().pack(_x))
        _v33 = _v1.lane_pos
        _x = _v33.data
        buff.write(_get_struct_i().pack(_x))
        _v34 = _v1.trakcer_id
        _x = _v34.data
        buff.write(_get_struct_i().pack(_x))
        _v35 = _v1.age
        _x = _v35.data
        buff.write(_get_struct_d().pack(_x))
        _v36 = _v1.velocity
        _v37 = _v36.x
        _x = _v37.data
        buff.write(_get_struct_f().pack(_x))
        _v38 = _v36.y
        _x = _v38.data
        buff.write(_get_struct_f().pack(_x))
        _v39 = _v36.z
        _x = _v39.data
        buff.write(_get_struct_f().pack(_x))
        _v40 = _v1.velocity_cov
        _v41 = _v40.x
        _x = _v41.data
        buff.write(_get_struct_f().pack(_x))
        _v42 = _v40.y
        _x = _v42.data
        buff.write(_get_struct_f().pack(_x))
        _v43 = _v40.z
        _x = _v43.data
        buff.write(_get_struct_f().pack(_x))
        _v44 = _v1.acceleration
        _v45 = _v44.x
        _x = _v45.data
        buff.write(_get_struct_f().pack(_x))
        _v46 = _v44.y
        _x = _v46.data
        buff.write(_get_struct_f().pack(_x))
        _v47 = _v44.z
        _x = _v47.data
        buff.write(_get_struct_f().pack(_x))
        _v48 = _v1.acceleration_cov
        _v49 = _v48.x
        _x = _v49.data
        buff.write(_get_struct_f().pack(_x))
        _v50 = _v48.y
        _x = _v50.data
        buff.write(_get_struct_f().pack(_x))
        _v51 = _v48.z
        _x = _v51.data
        buff.write(_get_struct_f().pack(_x))
        _v52 = _v1.angle_velocity
        _x = _v52.data
        buff.write(_get_struct_f().pack(_x))
        _v53 = _v1.angle_velocity_cov
        _x = _v53.data
        buff.write(_get_struct_f().pack(_x))
        _v54 = _v1.angle_acceleration
        _x = _v54.data
        buff.write(_get_struct_f().pack(_x))
        _v55 = _v1.angle_acceleration_cov
        _x = _v55.data
        buff.write(_get_struct_f().pack(_x))
        _v56 = _v1.anchor
        _v57 = _v56.x
        _x = _v57.data
        buff.write(_get_struct_f().pack(_x))
        _v58 = _v56.y
        _x = _v58.data
        buff.write(_get_struct_f().pack(_x))
        _v59 = _v56.z
        _x = _v59.data
        buff.write(_get_struct_f().pack(_x))
        _v60 = _v1.nearest_point
        _v61 = _v60.x
        _x = _v61.data
        buff.write(_get_struct_f().pack(_x))
        _v62 = _v60.y
        _x = _v62.data
        buff.write(_get_struct_f().pack(_x))
        _v63 = _v60.z
        _x = _v63.data
        buff.write(_get_struct_f().pack(_x))
        _v64 = val1.hassupplmentinfo
        _x = _v64.data
        buff.write(_get_struct_B().pack(_x))
        _v65 = val1.supplementinfo
        _v66 = _v65.unique_id
        _x = _v66.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v65.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.polygon:
          _v67 = val3.x
          _x = _v67.data
          buff.write(_get_struct_f().pack(_x))
          _v68 = val3.y
          _x = _v68.data
          buff.write(_get_struct_f().pack(_x))
          _v69 = val3.z
          _x = _v69.data
          buff.write(_get_struct_f().pack(_x))
        _v70 = _v65.left_point_index
        _x = _v70.data
        buff.write(_get_struct_i().pack(_x))
        _v71 = _v65.right_point_index
        _x = _v71.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v65.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v65.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v72 = _v65.size_type
        _x = _v72.data
        buff.write(_get_struct_i().pack(_x))
        _v73 = _v65.mode
        _x = _v73.data
        buff.write(_get_struct_i().pack(_x))
        _v74 = _v65.in_roi
        _x = _v74.data
        buff.write(_get_struct_B().pack(_x))
        _v75 = _v65.tracking_state
        _x = _v75.data
        buff.write(_get_struct_i().pack(_x))
        _v76 = _v65.geo_center
        _v77 = _v76.x
        _x = _v77.data
        buff.write(_get_struct_f().pack(_x))
        _v78 = _v76.y
        _x = _v78.data
        buff.write(_get_struct_f().pack(_x))
        _v79 = _v76.z
        _x = _v79.data
        buff.write(_get_struct_f().pack(_x))
        _v80 = _v65.geo_size
        _v81 = _v80.x
        _x = _v81.data
        buff.write(_get_struct_f().pack(_x))
        _v82 = _v80.y
        _x = _v82.data
        buff.write(_get_struct_f().pack(_x))
        _v83 = _v80.z
        _x = _v83.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v65.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.trajectory:
          _v84 = val3.x
          _x = _v84.data
          buff.write(_get_struct_f().pack(_x))
          _v85 = val3.y
          _x = _v85.data
          buff.write(_get_struct_f().pack(_x))
          _v86 = val3.z
          _x = _v86.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v65.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.history_velocity:
          _v87 = val3.x
          _x = _v87.data
          buff.write(_get_struct_f().pack(_x))
          _v88 = val3.y
          _x = _v88.data
          buff.write(_get_struct_f().pack(_x))
          _v89 = val3.z
          _x = _v89.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v65.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v90 = _v65.gps_mode
        _x = _v90.data
        buff.write(_get_struct_i().pack(_x))
        _v91 = _v65.gps_info
        _v92 = _v91.x
        _x = _v92.data
        buff.write(_get_struct_d().pack(_x))
        _v93 = _v91.y
        _x = _v93.data
        buff.write(_get_struct_d().pack(_x))
        _v94 = _v91.z
        _x = _v94.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v95 = val1.coreinfo
        _v96 = _v95.timestamp
        start = end
        end += 8
        (_v96.data,) = _get_struct_d().unpack(str[start:end])
        _v97 = _v95.priority_id
        start = end
        end += 4
        (_v97.data,) = _get_struct_i().unpack(str[start:end])
        _v98 = _v95.exist_confidence
        start = end
        end += 4
        (_v98.data,) = _get_struct_f().unpack(str[start:end])
        _v99 = _v95.center
        _v100 = _v99.x
        start = end
        end += 4
        (_v100.data,) = _get_struct_f().unpack(str[start:end])
        _v101 = _v99.y
        start = end
        end += 4
        (_v101.data,) = _get_struct_f().unpack(str[start:end])
        _v102 = _v99.z
        start = end
        end += 4
        (_v102.data,) = _get_struct_f().unpack(str[start:end])
        _v103 = _v95.center_cov
        _v104 = _v103.x
        start = end
        end += 4
        (_v104.data,) = _get_struct_f().unpack(str[start:end])
        _v105 = _v103.y
        start = end
        end += 4
        (_v105.data,) = _get_struct_f().unpack(str[start:end])
        _v106 = _v103.z
        start = end
        end += 4
        (_v106.data,) = _get_struct_f().unpack(str[start:end])
        _v107 = _v95.size
        _v108 = _v107.x
        start = end
        end += 4
        (_v108.data,) = _get_struct_f().unpack(str[start:end])
        _v109 = _v107.y
        start = end
        end += 4
        (_v109.data,) = _get_struct_f().unpack(str[start:end])
        _v110 = _v107.z
        start = end
        end += 4
        (_v110.data,) = _get_struct_f().unpack(str[start:end])
        _v111 = _v95.size_cov
        _v112 = _v111.x
        start = end
        end += 4
        (_v112.data,) = _get_struct_f().unpack(str[start:end])
        _v113 = _v111.y
        start = end
        end += 4
        (_v113.data,) = _get_struct_f().unpack(str[start:end])
        _v114 = _v111.z
        start = end
        end += 4
        (_v114.data,) = _get_struct_f().unpack(str[start:end])
        _v115 = _v95.direction
        _v116 = _v115.x
        start = end
        end += 4
        (_v116.data,) = _get_struct_f().unpack(str[start:end])
        _v117 = _v115.y
        start = end
        end += 4
        (_v117.data,) = _get_struct_f().unpack(str[start:end])
        _v118 = _v115.z
        start = end
        end += 4
        (_v118.data,) = _get_struct_f().unpack(str[start:end])
        _v119 = _v95.direction_cov
        _v120 = _v119.x
        start = end
        end += 4
        (_v120.data,) = _get_struct_f().unpack(str[start:end])
        _v121 = _v119.y
        start = end
        end += 4
        (_v121.data,) = _get_struct_f().unpack(str[start:end])
        _v122 = _v119.z
        start = end
        end += 4
        (_v122.data,) = _get_struct_f().unpack(str[start:end])
        _v123 = _v95.type
        start = end
        end += 4
        (_v123.data,) = _get_struct_i().unpack(str[start:end])
        _v124 = _v95.type_confidence
        start = end
        end += 4
        (_v124.data,) = _get_struct_f().unpack(str[start:end])
        _v125 = _v95.attention_type
        start = end
        end += 4
        (_v125.data,) = _get_struct_i().unpack(str[start:end])
        _v126 = _v95.motion_state
        start = end
        end += 4
        (_v126.data,) = _get_struct_i().unpack(str[start:end])
        _v127 = _v95.lane_pos
        start = end
        end += 4
        (_v127.data,) = _get_struct_i().unpack(str[start:end])
        _v128 = _v95.trakcer_id
        start = end
        end += 4
        (_v128.data,) = _get_struct_i().unpack(str[start:end])
        _v129 = _v95.age
        start = end
        end += 8
        (_v129.data,) = _get_struct_d().unpack(str[start:end])
        _v130 = _v95.velocity
        _v131 = _v130.x
        start = end
        end += 4
        (_v131.data,) = _get_struct_f().unpack(str[start:end])
        _v132 = _v130.y
        start = end
        end += 4
        (_v132.data,) = _get_struct_f().unpack(str[start:end])
        _v133 = _v130.z
        start = end
        end += 4
        (_v133.data,) = _get_struct_f().unpack(str[start:end])
        _v134 = _v95.velocity_cov
        _v135 = _v134.x
        start = end
        end += 4
        (_v135.data,) = _get_struct_f().unpack(str[start:end])
        _v136 = _v134.y
        start = end
        end += 4
        (_v136.data,) = _get_struct_f().unpack(str[start:end])
        _v137 = _v134.z
        start = end
        end += 4
        (_v137.data,) = _get_struct_f().unpack(str[start:end])
        _v138 = _v95.acceleration
        _v139 = _v138.x
        start = end
        end += 4
        (_v139.data,) = _get_struct_f().unpack(str[start:end])
        _v140 = _v138.y
        start = end
        end += 4
        (_v140.data,) = _get_struct_f().unpack(str[start:end])
        _v141 = _v138.z
        start = end
        end += 4
        (_v141.data,) = _get_struct_f().unpack(str[start:end])
        _v142 = _v95.acceleration_cov
        _v143 = _v142.x
        start = end
        end += 4
        (_v143.data,) = _get_struct_f().unpack(str[start:end])
        _v144 = _v142.y
        start = end
        end += 4
        (_v144.data,) = _get_struct_f().unpack(str[start:end])
        _v145 = _v142.z
        start = end
        end += 4
        (_v145.data,) = _get_struct_f().unpack(str[start:end])
        _v146 = _v95.angle_velocity
        start = end
        end += 4
        (_v146.data,) = _get_struct_f().unpack(str[start:end])
        _v147 = _v95.angle_velocity_cov
        start = end
        end += 4
        (_v147.data,) = _get_struct_f().unpack(str[start:end])
        _v148 = _v95.angle_acceleration
        start = end
        end += 4
        (_v148.data,) = _get_struct_f().unpack(str[start:end])
        _v149 = _v95.angle_acceleration_cov
        start = end
        end += 4
        (_v149.data,) = _get_struct_f().unpack(str[start:end])
        _v150 = _v95.anchor
        _v151 = _v150.x
        start = end
        end += 4
        (_v151.data,) = _get_struct_f().unpack(str[start:end])
        _v152 = _v150.y
        start = end
        end += 4
        (_v152.data,) = _get_struct_f().unpack(str[start:end])
        _v153 = _v150.z
        start = end
        end += 4
        (_v153.data,) = _get_struct_f().unpack(str[start:end])
        _v154 = _v95.nearest_point
        _v155 = _v154.x
        start = end
        end += 4
        (_v155.data,) = _get_struct_f().unpack(str[start:end])
        _v156 = _v154.y
        start = end
        end += 4
        (_v156.data,) = _get_struct_f().unpack(str[start:end])
        _v157 = _v154.z
        start = end
        end += 4
        (_v157.data,) = _get_struct_f().unpack(str[start:end])
        _v158 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v158.data,) = _get_struct_B().unpack(str[start:end])
        _v158.data = bool(_v158.data)
        _v159 = val1.supplementinfo
        _v160 = _v159.unique_id
        start = end
        end += 4
        (_v160.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v161 = val3.x
          start = end
          end += 4
          (_v161.data,) = _get_struct_f().unpack(str[start:end])
          _v162 = val3.y
          start = end
          end += 4
          (_v162.data,) = _get_struct_f().unpack(str[start:end])
          _v163 = val3.z
          start = end
          end += 4
          (_v163.data,) = _get_struct_f().unpack(str[start:end])
          _v159.polygon.append(val3)
        _v164 = _v159.left_point_index
        start = end
        end += 4
        (_v164.data,) = _get_struct_i().unpack(str[start:end])
        _v165 = _v159.right_point_index
        start = end
        end += 4
        (_v165.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v159.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v159.latent_types.append(val3)
        _v166 = _v159.size_type
        start = end
        end += 4
        (_v166.data,) = _get_struct_i().unpack(str[start:end])
        _v167 = _v159.mode
        start = end
        end += 4
        (_v167.data,) = _get_struct_i().unpack(str[start:end])
        _v168 = _v159.in_roi
        start = end
        end += 1
        (_v168.data,) = _get_struct_B().unpack(str[start:end])
        _v168.data = bool(_v168.data)
        _v169 = _v159.tracking_state
        start = end
        end += 4
        (_v169.data,) = _get_struct_i().unpack(str[start:end])
        _v170 = _v159.geo_center
        _v171 = _v170.x
        start = end
        end += 4
        (_v171.data,) = _get_struct_f().unpack(str[start:end])
        _v172 = _v170.y
        start = end
        end += 4
        (_v172.data,) = _get_struct_f().unpack(str[start:end])
        _v173 = _v170.z
        start = end
        end += 4
        (_v173.data,) = _get_struct_f().unpack(str[start:end])
        _v174 = _v159.geo_size
        _v175 = _v174.x
        start = end
        end += 4
        (_v175.data,) = _get_struct_f().unpack(str[start:end])
        _v176 = _v174.y
        start = end
        end += 4
        (_v176.data,) = _get_struct_f().unpack(str[start:end])
        _v177 = _v174.z
        start = end
        end += 4
        (_v177.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v178 = val3.x
          start = end
          end += 4
          (_v178.data,) = _get_struct_f().unpack(str[start:end])
          _v179 = val3.y
          start = end
          end += 4
          (_v179.data,) = _get_struct_f().unpack(str[start:end])
          _v180 = val3.z
          start = end
          end += 4
          (_v180.data,) = _get_struct_f().unpack(str[start:end])
          _v159.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v181 = val3.x
          start = end
          end += 4
          (_v181.data,) = _get_struct_f().unpack(str[start:end])
          _v182 = val3.y
          start = end
          end += 4
          (_v182.data,) = _get_struct_f().unpack(str[start:end])
          _v183 = val3.z
          start = end
          end += 4
          (_v183.data,) = _get_struct_f().unpack(str[start:end])
          _v159.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v159.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v159.history_type.append(val3)
        _v184 = _v159.gps_mode
        start = end
        end += 4
        (_v184.data,) = _get_struct_i().unpack(str[start:end])
        _v185 = _v159.gps_info
        _v186 = _v185.x
        start = end
        end += 8
        (_v186.data,) = _get_struct_d().unpack(str[start:end])
        _v187 = _v185.y
        start = end
        end += 8
        (_v187.data,) = _get_struct_d().unpack(str[start:end])
        _v188 = _v185.z
        start = end
        end += 8
        (_v188.data,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v189 = val1.coreinfo
        _v190 = _v189.timestamp
        _x = _v190.data
        buff.write(_get_struct_d().pack(_x))
        _v191 = _v189.priority_id
        _x = _v191.data
        buff.write(_get_struct_i().pack(_x))
        _v192 = _v189.exist_confidence
        _x = _v192.data
        buff.write(_get_struct_f().pack(_x))
        _v193 = _v189.center
        _v194 = _v193.x
        _x = _v194.data
        buff.write(_get_struct_f().pack(_x))
        _v195 = _v193.y
        _x = _v195.data
        buff.write(_get_struct_f().pack(_x))
        _v196 = _v193.z
        _x = _v196.data
        buff.write(_get_struct_f().pack(_x))
        _v197 = _v189.center_cov
        _v198 = _v197.x
        _x = _v198.data
        buff.write(_get_struct_f().pack(_x))
        _v199 = _v197.y
        _x = _v199.data
        buff.write(_get_struct_f().pack(_x))
        _v200 = _v197.z
        _x = _v200.data
        buff.write(_get_struct_f().pack(_x))
        _v201 = _v189.size
        _v202 = _v201.x
        _x = _v202.data
        buff.write(_get_struct_f().pack(_x))
        _v203 = _v201.y
        _x = _v203.data
        buff.write(_get_struct_f().pack(_x))
        _v204 = _v201.z
        _x = _v204.data
        buff.write(_get_struct_f().pack(_x))
        _v205 = _v189.size_cov
        _v206 = _v205.x
        _x = _v206.data
        buff.write(_get_struct_f().pack(_x))
        _v207 = _v205.y
        _x = _v207.data
        buff.write(_get_struct_f().pack(_x))
        _v208 = _v205.z
        _x = _v208.data
        buff.write(_get_struct_f().pack(_x))
        _v209 = _v189.direction
        _v210 = _v209.x
        _x = _v210.data
        buff.write(_get_struct_f().pack(_x))
        _v211 = _v209.y
        _x = _v211.data
        buff.write(_get_struct_f().pack(_x))
        _v212 = _v209.z
        _x = _v212.data
        buff.write(_get_struct_f().pack(_x))
        _v213 = _v189.direction_cov
        _v214 = _v213.x
        _x = _v214.data
        buff.write(_get_struct_f().pack(_x))
        _v215 = _v213.y
        _x = _v215.data
        buff.write(_get_struct_f().pack(_x))
        _v216 = _v213.z
        _x = _v216.data
        buff.write(_get_struct_f().pack(_x))
        _v217 = _v189.type
        _x = _v217.data
        buff.write(_get_struct_i().pack(_x))
        _v218 = _v189.type_confidence
        _x = _v218.data
        buff.write(_get_struct_f().pack(_x))
        _v219 = _v189.attention_type
        _x = _v219.data
        buff.write(_get_struct_i().pack(_x))
        _v220 = _v189.motion_state
        _x = _v220.data
        buff.write(_get_struct_i().pack(_x))
        _v221 = _v189.lane_pos
        _x = _v221.data
        buff.write(_get_struct_i().pack(_x))
        _v222 = _v189.trakcer_id
        _x = _v222.data
        buff.write(_get_struct_i().pack(_x))
        _v223 = _v189.age
        _x = _v223.data
        buff.write(_get_struct_d().pack(_x))
        _v224 = _v189.velocity
        _v225 = _v224.x
        _x = _v225.data
        buff.write(_get_struct_f().pack(_x))
        _v226 = _v224.y
        _x = _v226.data
        buff.write(_get_struct_f().pack(_x))
        _v227 = _v224.z
        _x = _v227.data
        buff.write(_get_struct_f().pack(_x))
        _v228 = _v189.velocity_cov
        _v229 = _v228.x
        _x = _v229.data
        buff.write(_get_struct_f().pack(_x))
        _v230 = _v228.y
        _x = _v230.data
        buff.write(_get_struct_f().pack(_x))
        _v231 = _v228.z
        _x = _v231.data
        buff.write(_get_struct_f().pack(_x))
        _v232 = _v189.acceleration
        _v233 = _v232.x
        _x = _v233.data
        buff.write(_get_struct_f().pack(_x))
        _v234 = _v232.y
        _x = _v234.data
        buff.write(_get_struct_f().pack(_x))
        _v235 = _v232.z
        _x = _v235.data
        buff.write(_get_struct_f().pack(_x))
        _v236 = _v189.acceleration_cov
        _v237 = _v236.x
        _x = _v237.data
        buff.write(_get_struct_f().pack(_x))
        _v238 = _v236.y
        _x = _v238.data
        buff.write(_get_struct_f().pack(_x))
        _v239 = _v236.z
        _x = _v239.data
        buff.write(_get_struct_f().pack(_x))
        _v240 = _v189.angle_velocity
        _x = _v240.data
        buff.write(_get_struct_f().pack(_x))
        _v241 = _v189.angle_velocity_cov
        _x = _v241.data
        buff.write(_get_struct_f().pack(_x))
        _v242 = _v189.angle_acceleration
        _x = _v242.data
        buff.write(_get_struct_f().pack(_x))
        _v243 = _v189.angle_acceleration_cov
        _x = _v243.data
        buff.write(_get_struct_f().pack(_x))
        _v244 = _v189.anchor
        _v245 = _v244.x
        _x = _v245.data
        buff.write(_get_struct_f().pack(_x))
        _v246 = _v244.y
        _x = _v246.data
        buff.write(_get_struct_f().pack(_x))
        _v247 = _v244.z
        _x = _v247.data
        buff.write(_get_struct_f().pack(_x))
        _v248 = _v189.nearest_point
        _v249 = _v248.x
        _x = _v249.data
        buff.write(_get_struct_f().pack(_x))
        _v250 = _v248.y
        _x = _v250.data
        buff.write(_get_struct_f().pack(_x))
        _v251 = _v248.z
        _x = _v251.data
        buff.write(_get_struct_f().pack(_x))
        _v252 = val1.hassupplmentinfo
        _x = _v252.data
        buff.write(_get_struct_B().pack(_x))
        _v253 = val1.supplementinfo
        _v254 = _v253.unique_id
        _x = _v254.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v253.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.polygon:
          _v255 = val3.x
          _x = _v255.data
          buff.write(_get_struct_f().pack(_x))
          _v256 = val3.y
          _x = _v256.data
          buff.write(_get_struct_f().pack(_x))
          _v257 = val3.z
          _x = _v257.data
          buff.write(_get_struct_f().pack(_x))
        _v258 = _v253.left_point_index
        _x = _v258.data
        buff.write(_get_struct_i().pack(_x))
        _v259 = _v253.right_point_index
        _x = _v259.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v253.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v253.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v260 = _v253.size_type
        _x = _v260.data
        buff.write(_get_struct_i().pack(_x))
        _v261 = _v253.mode
        _x = _v261.data
        buff.write(_get_struct_i().pack(_x))
        _v262 = _v253.in_roi
        _x = _v262.data
        buff.write(_get_struct_B().pack(_x))
        _v263 = _v253.tracking_state
        _x = _v263.data
        buff.write(_get_struct_i().pack(_x))
        _v264 = _v253.geo_center
        _v265 = _v264.x
        _x = _v265.data
        buff.write(_get_struct_f().pack(_x))
        _v266 = _v264.y
        _x = _v266.data
        buff.write(_get_struct_f().pack(_x))
        _v267 = _v264.z
        _x = _v267.data
        buff.write(_get_struct_f().pack(_x))
        _v268 = _v253.geo_size
        _v269 = _v268.x
        _x = _v269.data
        buff.write(_get_struct_f().pack(_x))
        _v270 = _v268.y
        _x = _v270.data
        buff.write(_get_struct_f().pack(_x))
        _v271 = _v268.z
        _x = _v271.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v253.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.trajectory:
          _v272 = val3.x
          _x = _v272.data
          buff.write(_get_struct_f().pack(_x))
          _v273 = val3.y
          _x = _v273.data
          buff.write(_get_struct_f().pack(_x))
          _v274 = val3.z
          _x = _v274.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v253.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.history_velocity:
          _v275 = val3.x
          _x = _v275.data
          buff.write(_get_struct_f().pack(_x))
          _v276 = val3.y
          _x = _v276.data
          buff.write(_get_struct_f().pack(_x))
          _v277 = val3.z
          _x = _v277.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v253.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v278 = _v253.gps_mode
        _x = _v278.data
        buff.write(_get_struct_i().pack(_x))
        _v279 = _v253.gps_info
        _v280 = _v279.x
        _x = _v280.data
        buff.write(_get_struct_d().pack(_x))
        _v281 = _v279.y
        _x = _v281.data
        buff.write(_get_struct_d().pack(_x))
        _v282 = _v279.z
        _x = _v282.data
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objects is None:
        self.objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v283 = val1.coreinfo
        _v284 = _v283.timestamp
        start = end
        end += 8
        (_v284.data,) = _get_struct_d().unpack(str[start:end])
        _v285 = _v283.priority_id
        start = end
        end += 4
        (_v285.data,) = _get_struct_i().unpack(str[start:end])
        _v286 = _v283.exist_confidence
        start = end
        end += 4
        (_v286.data,) = _get_struct_f().unpack(str[start:end])
        _v287 = _v283.center
        _v288 = _v287.x
        start = end
        end += 4
        (_v288.data,) = _get_struct_f().unpack(str[start:end])
        _v289 = _v287.y
        start = end
        end += 4
        (_v289.data,) = _get_struct_f().unpack(str[start:end])
        _v290 = _v287.z
        start = end
        end += 4
        (_v290.data,) = _get_struct_f().unpack(str[start:end])
        _v291 = _v283.center_cov
        _v292 = _v291.x
        start = end
        end += 4
        (_v292.data,) = _get_struct_f().unpack(str[start:end])
        _v293 = _v291.y
        start = end
        end += 4
        (_v293.data,) = _get_struct_f().unpack(str[start:end])
        _v294 = _v291.z
        start = end
        end += 4
        (_v294.data,) = _get_struct_f().unpack(str[start:end])
        _v295 = _v283.size
        _v296 = _v295.x
        start = end
        end += 4
        (_v296.data,) = _get_struct_f().unpack(str[start:end])
        _v297 = _v295.y
        start = end
        end += 4
        (_v297.data,) = _get_struct_f().unpack(str[start:end])
        _v298 = _v295.z
        start = end
        end += 4
        (_v298.data,) = _get_struct_f().unpack(str[start:end])
        _v299 = _v283.size_cov
        _v300 = _v299.x
        start = end
        end += 4
        (_v300.data,) = _get_struct_f().unpack(str[start:end])
        _v301 = _v299.y
        start = end
        end += 4
        (_v301.data,) = _get_struct_f().unpack(str[start:end])
        _v302 = _v299.z
        start = end
        end += 4
        (_v302.data,) = _get_struct_f().unpack(str[start:end])
        _v303 = _v283.direction
        _v304 = _v303.x
        start = end
        end += 4
        (_v304.data,) = _get_struct_f().unpack(str[start:end])
        _v305 = _v303.y
        start = end
        end += 4
        (_v305.data,) = _get_struct_f().unpack(str[start:end])
        _v306 = _v303.z
        start = end
        end += 4
        (_v306.data,) = _get_struct_f().unpack(str[start:end])
        _v307 = _v283.direction_cov
        _v308 = _v307.x
        start = end
        end += 4
        (_v308.data,) = _get_struct_f().unpack(str[start:end])
        _v309 = _v307.y
        start = end
        end += 4
        (_v309.data,) = _get_struct_f().unpack(str[start:end])
        _v310 = _v307.z
        start = end
        end += 4
        (_v310.data,) = _get_struct_f().unpack(str[start:end])
        _v311 = _v283.type
        start = end
        end += 4
        (_v311.data,) = _get_struct_i().unpack(str[start:end])
        _v312 = _v283.type_confidence
        start = end
        end += 4
        (_v312.data,) = _get_struct_f().unpack(str[start:end])
        _v313 = _v283.attention_type
        start = end
        end += 4
        (_v313.data,) = _get_struct_i().unpack(str[start:end])
        _v314 = _v283.motion_state
        start = end
        end += 4
        (_v314.data,) = _get_struct_i().unpack(str[start:end])
        _v315 = _v283.lane_pos
        start = end
        end += 4
        (_v315.data,) = _get_struct_i().unpack(str[start:end])
        _v316 = _v283.trakcer_id
        start = end
        end += 4
        (_v316.data,) = _get_struct_i().unpack(str[start:end])
        _v317 = _v283.age
        start = end
        end += 8
        (_v317.data,) = _get_struct_d().unpack(str[start:end])
        _v318 = _v283.velocity
        _v319 = _v318.x
        start = end
        end += 4
        (_v319.data,) = _get_struct_f().unpack(str[start:end])
        _v320 = _v318.y
        start = end
        end += 4
        (_v320.data,) = _get_struct_f().unpack(str[start:end])
        _v321 = _v318.z
        start = end
        end += 4
        (_v321.data,) = _get_struct_f().unpack(str[start:end])
        _v322 = _v283.velocity_cov
        _v323 = _v322.x
        start = end
        end += 4
        (_v323.data,) = _get_struct_f().unpack(str[start:end])
        _v324 = _v322.y
        start = end
        end += 4
        (_v324.data,) = _get_struct_f().unpack(str[start:end])
        _v325 = _v322.z
        start = end
        end += 4
        (_v325.data,) = _get_struct_f().unpack(str[start:end])
        _v326 = _v283.acceleration
        _v327 = _v326.x
        start = end
        end += 4
        (_v327.data,) = _get_struct_f().unpack(str[start:end])
        _v328 = _v326.y
        start = end
        end += 4
        (_v328.data,) = _get_struct_f().unpack(str[start:end])
        _v329 = _v326.z
        start = end
        end += 4
        (_v329.data,) = _get_struct_f().unpack(str[start:end])
        _v330 = _v283.acceleration_cov
        _v331 = _v330.x
        start = end
        end += 4
        (_v331.data,) = _get_struct_f().unpack(str[start:end])
        _v332 = _v330.y
        start = end
        end += 4
        (_v332.data,) = _get_struct_f().unpack(str[start:end])
        _v333 = _v330.z
        start = end
        end += 4
        (_v333.data,) = _get_struct_f().unpack(str[start:end])
        _v334 = _v283.angle_velocity
        start = end
        end += 4
        (_v334.data,) = _get_struct_f().unpack(str[start:end])
        _v335 = _v283.angle_velocity_cov
        start = end
        end += 4
        (_v335.data,) = _get_struct_f().unpack(str[start:end])
        _v336 = _v283.angle_acceleration
        start = end
        end += 4
        (_v336.data,) = _get_struct_f().unpack(str[start:end])
        _v337 = _v283.angle_acceleration_cov
        start = end
        end += 4
        (_v337.data,) = _get_struct_f().unpack(str[start:end])
        _v338 = _v283.anchor
        _v339 = _v338.x
        start = end
        end += 4
        (_v339.data,) = _get_struct_f().unpack(str[start:end])
        _v340 = _v338.y
        start = end
        end += 4
        (_v340.data,) = _get_struct_f().unpack(str[start:end])
        _v341 = _v338.z
        start = end
        end += 4
        (_v341.data,) = _get_struct_f().unpack(str[start:end])
        _v342 = _v283.nearest_point
        _v343 = _v342.x
        start = end
        end += 4
        (_v343.data,) = _get_struct_f().unpack(str[start:end])
        _v344 = _v342.y
        start = end
        end += 4
        (_v344.data,) = _get_struct_f().unpack(str[start:end])
        _v345 = _v342.z
        start = end
        end += 4
        (_v345.data,) = _get_struct_f().unpack(str[start:end])
        _v346 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v346.data,) = _get_struct_B().unpack(str[start:end])
        _v346.data = bool(_v346.data)
        _v347 = val1.supplementinfo
        _v348 = _v347.unique_id
        start = end
        end += 4
        (_v348.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v349 = val3.x
          start = end
          end += 4
          (_v349.data,) = _get_struct_f().unpack(str[start:end])
          _v350 = val3.y
          start = end
          end += 4
          (_v350.data,) = _get_struct_f().unpack(str[start:end])
          _v351 = val3.z
          start = end
          end += 4
          (_v351.data,) = _get_struct_f().unpack(str[start:end])
          _v347.polygon.append(val3)
        _v352 = _v347.left_point_index
        start = end
        end += 4
        (_v352.data,) = _get_struct_i().unpack(str[start:end])
        _v353 = _v347.right_point_index
        start = end
        end += 4
        (_v353.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v347.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v347.latent_types.append(val3)
        _v354 = _v347.size_type
        start = end
        end += 4
        (_v354.data,) = _get_struct_i().unpack(str[start:end])
        _v355 = _v347.mode
        start = end
        end += 4
        (_v355.data,) = _get_struct_i().unpack(str[start:end])
        _v356 = _v347.in_roi
        start = end
        end += 1
        (_v356.data,) = _get_struct_B().unpack(str[start:end])
        _v356.data = bool(_v356.data)
        _v357 = _v347.tracking_state
        start = end
        end += 4
        (_v357.data,) = _get_struct_i().unpack(str[start:end])
        _v358 = _v347.geo_center
        _v359 = _v358.x
        start = end
        end += 4
        (_v359.data,) = _get_struct_f().unpack(str[start:end])
        _v360 = _v358.y
        start = end
        end += 4
        (_v360.data,) = _get_struct_f().unpack(str[start:end])
        _v361 = _v358.z
        start = end
        end += 4
        (_v361.data,) = _get_struct_f().unpack(str[start:end])
        _v362 = _v347.geo_size
        _v363 = _v362.x
        start = end
        end += 4
        (_v363.data,) = _get_struct_f().unpack(str[start:end])
        _v364 = _v362.y
        start = end
        end += 4
        (_v364.data,) = _get_struct_f().unpack(str[start:end])
        _v365 = _v362.z
        start = end
        end += 4
        (_v365.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v366 = val3.x
          start = end
          end += 4
          (_v366.data,) = _get_struct_f().unpack(str[start:end])
          _v367 = val3.y
          start = end
          end += 4
          (_v367.data,) = _get_struct_f().unpack(str[start:end])
          _v368 = val3.z
          start = end
          end += 4
          (_v368.data,) = _get_struct_f().unpack(str[start:end])
          _v347.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v369 = val3.x
          start = end
          end += 4
          (_v369.data,) = _get_struct_f().unpack(str[start:end])
          _v370 = val3.y
          start = end
          end += 4
          (_v370.data,) = _get_struct_f().unpack(str[start:end])
          _v371 = val3.z
          start = end
          end += 4
          (_v371.data,) = _get_struct_f().unpack(str[start:end])
          _v347.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v347.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v347.history_type.append(val3)
        _v372 = _v347.gps_mode
        start = end
        end += 4
        (_v372.data,) = _get_struct_i().unpack(str[start:end])
        _v373 = _v347.gps_info
        _v374 = _v373.x
        start = end
        end += 8
        (_v374.data,) = _get_struct_d().unpack(str[start:end])
        _v375 = _v373.y
        start = end
        end += 8
        (_v375.data,) = _get_struct_d().unpack(str[start:end])
        _v376 = _v373.z
        start = end
        end += 8
        (_v376.data,) = _get_struct_d().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
