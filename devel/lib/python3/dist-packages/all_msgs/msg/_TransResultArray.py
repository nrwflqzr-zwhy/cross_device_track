# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/TransResultArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class TransResultArray(genpy.Message):
  _md5sum = "3dc2c2ad61b7400d12ab8d2481f10686"
  _type = "all_msgs/TransResultArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
std_msgs/Float64 timestamp 
TransResult[] percept_results

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: all_msgs/TransResult
std_msgs/Header header
std_msgs/Float64 timestamp 
Point3f          size 
Point3f          center 
Point3f          velocity
std_msgs/Int32   type 
std_msgs/String detection_name
int32[] ct
int32[] tracking
int32 label_preds
int32 tracking_id
int32 age
int32 active
================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['header','timestamp','percept_results']
  _slot_types = ['std_msgs/Header','std_msgs/Float64','all_msgs/TransResult[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,timestamp,percept_results

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransResultArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.percept_results is None:
        self.percept_results = []
    else:
      self.header = std_msgs.msg.Header()
      self.timestamp = std_msgs.msg.Float64()
      self.percept_results = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp.data
      buff.write(_get_struct_d().pack(_x))
      length = len(self.percept_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.percept_results:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.timestamp
        _x = _v3.data
        buff.write(_get_struct_d().pack(_x))
        _v4 = val1.size
        _v5 = _v4.x
        _x = _v5.data
        buff.write(_get_struct_f().pack(_x))
        _v6 = _v4.y
        _x = _v6.data
        buff.write(_get_struct_f().pack(_x))
        _v7 = _v4.z
        _x = _v7.data
        buff.write(_get_struct_f().pack(_x))
        _v8 = val1.center
        _v9 = _v8.x
        _x = _v9.data
        buff.write(_get_struct_f().pack(_x))
        _v10 = _v8.y
        _x = _v10.data
        buff.write(_get_struct_f().pack(_x))
        _v11 = _v8.z
        _x = _v11.data
        buff.write(_get_struct_f().pack(_x))
        _v12 = val1.velocity
        _v13 = _v12.x
        _x = _v13.data
        buff.write(_get_struct_f().pack(_x))
        _v14 = _v12.y
        _x = _v14.data
        buff.write(_get_struct_f().pack(_x))
        _v15 = _v12.z
        _x = _v15.data
        buff.write(_get_struct_f().pack(_x))
        _v16 = val1.type
        _x = _v16.data
        buff.write(_get_struct_i().pack(_x))
        _v17 = val1.detection_name
        _x = _v17.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.ct)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.ct))
        length = len(val1.tracking)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.tracking))
        _x = val1
        buff.write(_get_struct_4i().pack(_x.label_preds, _x.tracking_id, _x.age, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.percept_results is None:
        self.percept_results = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.timestamp.data,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.percept_results = []
      for i in range(0, length):
        val1 = all_msgs.msg.TransResult()
        _v18 = val1.header
        start = end
        end += 4
        (_v18.seq,) = _get_struct_I().unpack(str[start:end])
        _v19 = _v18.stamp
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.frame_id = str[start:end]
        _v20 = val1.timestamp
        start = end
        end += 8
        (_v20.data,) = _get_struct_d().unpack(str[start:end])
        _v21 = val1.size
        _v22 = _v21.x
        start = end
        end += 4
        (_v22.data,) = _get_struct_f().unpack(str[start:end])
        _v23 = _v21.y
        start = end
        end += 4
        (_v23.data,) = _get_struct_f().unpack(str[start:end])
        _v24 = _v21.z
        start = end
        end += 4
        (_v24.data,) = _get_struct_f().unpack(str[start:end])
        _v25 = val1.center
        _v26 = _v25.x
        start = end
        end += 4
        (_v26.data,) = _get_struct_f().unpack(str[start:end])
        _v27 = _v25.y
        start = end
        end += 4
        (_v27.data,) = _get_struct_f().unpack(str[start:end])
        _v28 = _v25.z
        start = end
        end += 4
        (_v28.data,) = _get_struct_f().unpack(str[start:end])
        _v29 = val1.velocity
        _v30 = _v29.x
        start = end
        end += 4
        (_v30.data,) = _get_struct_f().unpack(str[start:end])
        _v31 = _v29.y
        start = end
        end += 4
        (_v31.data,) = _get_struct_f().unpack(str[start:end])
        _v32 = _v29.z
        start = end
        end += 4
        (_v32.data,) = _get_struct_f().unpack(str[start:end])
        _v33 = val1.type
        start = end
        end += 4
        (_v33.data,) = _get_struct_i().unpack(str[start:end])
        _v34 = val1.detection_name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.ct = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tracking = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.label_preds, _x.tracking_id, _x.age, _x.active,) = _get_struct_4i().unpack(str[start:end])
        self.percept_results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp.data
      buff.write(_get_struct_d().pack(_x))
      length = len(self.percept_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.percept_results:
        _v35 = val1.header
        _x = _v35.seq
        buff.write(_get_struct_I().pack(_x))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v37 = val1.timestamp
        _x = _v37.data
        buff.write(_get_struct_d().pack(_x))
        _v38 = val1.size
        _v39 = _v38.x
        _x = _v39.data
        buff.write(_get_struct_f().pack(_x))
        _v40 = _v38.y
        _x = _v40.data
        buff.write(_get_struct_f().pack(_x))
        _v41 = _v38.z
        _x = _v41.data
        buff.write(_get_struct_f().pack(_x))
        _v42 = val1.center
        _v43 = _v42.x
        _x = _v43.data
        buff.write(_get_struct_f().pack(_x))
        _v44 = _v42.y
        _x = _v44.data
        buff.write(_get_struct_f().pack(_x))
        _v45 = _v42.z
        _x = _v45.data
        buff.write(_get_struct_f().pack(_x))
        _v46 = val1.velocity
        _v47 = _v46.x
        _x = _v47.data
        buff.write(_get_struct_f().pack(_x))
        _v48 = _v46.y
        _x = _v48.data
        buff.write(_get_struct_f().pack(_x))
        _v49 = _v46.z
        _x = _v49.data
        buff.write(_get_struct_f().pack(_x))
        _v50 = val1.type
        _x = _v50.data
        buff.write(_get_struct_i().pack(_x))
        _v51 = val1.detection_name
        _x = _v51.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.ct)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.ct.tostring())
        length = len(val1.tracking)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.tracking.tostring())
        _x = val1
        buff.write(_get_struct_4i().pack(_x.label_preds, _x.tracking_id, _x.age, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.percept_results is None:
        self.percept_results = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.timestamp.data,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.percept_results = []
      for i in range(0, length):
        val1 = all_msgs.msg.TransResult()
        _v52 = val1.header
        start = end
        end += 4
        (_v52.seq,) = _get_struct_I().unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.frame_id = str[start:end]
        _v54 = val1.timestamp
        start = end
        end += 8
        (_v54.data,) = _get_struct_d().unpack(str[start:end])
        _v55 = val1.size
        _v56 = _v55.x
        start = end
        end += 4
        (_v56.data,) = _get_struct_f().unpack(str[start:end])
        _v57 = _v55.y
        start = end
        end += 4
        (_v57.data,) = _get_struct_f().unpack(str[start:end])
        _v58 = _v55.z
        start = end
        end += 4
        (_v58.data,) = _get_struct_f().unpack(str[start:end])
        _v59 = val1.center
        _v60 = _v59.x
        start = end
        end += 4
        (_v60.data,) = _get_struct_f().unpack(str[start:end])
        _v61 = _v59.y
        start = end
        end += 4
        (_v61.data,) = _get_struct_f().unpack(str[start:end])
        _v62 = _v59.z
        start = end
        end += 4
        (_v62.data,) = _get_struct_f().unpack(str[start:end])
        _v63 = val1.velocity
        _v64 = _v63.x
        start = end
        end += 4
        (_v64.data,) = _get_struct_f().unpack(str[start:end])
        _v65 = _v63.y
        start = end
        end += 4
        (_v65.data,) = _get_struct_f().unpack(str[start:end])
        _v66 = _v63.z
        start = end
        end += 4
        (_v66.data,) = _get_struct_f().unpack(str[start:end])
        _v67 = val1.type
        start = end
        end += 4
        (_v67.data,) = _get_struct_i().unpack(str[start:end])
        _v68 = val1.detection_name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v68.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v68.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.ct = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tracking = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _x = val1
        start = end
        end += 16
        (_x.label_preds, _x.tracking_id, _x.age, _x.active,) = _get_struct_4i().unpack(str[start:end])
        self.percept_results.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
