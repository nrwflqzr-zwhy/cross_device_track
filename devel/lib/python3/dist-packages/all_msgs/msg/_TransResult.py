# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/TransResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class TransResult(genpy.Message):
  _md5sum = "306dc6cbac8c1352da94701707ad2094"
  _type = "all_msgs/TransResult"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
std_msgs/Float64 timestamp 
Point3f          size 
Point3f          center 
Point3f          velocity
std_msgs/Int32   type 
std_msgs/String detection_name
int32[] ct
int32[] tracking
int32 label_preds
int32 tracking_id
int32 age
int32 active
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['header','timestamp','size','center','velocity','type','detection_name','ct','tracking','label_preds','tracking_id','age','active']
  _slot_types = ['std_msgs/Header','std_msgs/Float64','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','std_msgs/Int32','std_msgs/String','int32[]','int32[]','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,timestamp,size,center,velocity,type,detection_name,ct,tracking,label_preds,tracking_id,age,active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.detection_name is None:
        self.detection_name = std_msgs.msg.String()
      if self.ct is None:
        self.ct = []
      if self.tracking is None:
        self.tracking = []
      if self.label_preds is None:
        self.label_preds = 0
      if self.tracking_id is None:
        self.tracking_id = 0
      if self.age is None:
        self.age = 0
      if self.active is None:
        self.active = 0
    else:
      self.header = std_msgs.msg.Header()
      self.timestamp = std_msgs.msg.Float64()
      self.size = all_msgs.msg.Point3f()
      self.center = all_msgs.msg.Point3f()
      self.velocity = all_msgs.msg.Point3f()
      self.type = std_msgs.msg.Int32()
      self.detection_name = std_msgs.msg.String()
      self.ct = []
      self.tracking = []
      self.label_preds = 0
      self.tracking_id = 0
      self.age = 0
      self.active = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d9fi().pack(_x.timestamp.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.type.data))
      _x = self.detection_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ct)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.ct))
      length = len(self.tracking)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.tracking))
      _x = self
      buff.write(_get_struct_4i().pack(_x.label_preds, _x.tracking_id, _x.age, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.detection_name is None:
        self.detection_name = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.timestamp.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.type.data,) = _get_struct_d9fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_name.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detection_name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ct = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracking = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.label_preds, _x.tracking_id, _x.age, _x.active,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d9fi().pack(_x.timestamp.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.type.data))
      _x = self.detection_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ct)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ct.tostring())
      length = len(self.tracking)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.tracking.tostring())
      _x = self
      buff.write(_get_struct_4i().pack(_x.label_preds, _x.tracking_id, _x.age, _x.active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.detection_name is None:
        self.detection_name = std_msgs.msg.String()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.timestamp.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.type.data,) = _get_struct_d9fi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_name.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detection_name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ct = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tracking = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 16
      (_x.label_preds, _x.tracking_id, _x.age, _x.active,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_d9fi = None
def _get_struct_d9fi():
    global _struct_d9fi
    if _struct_d9fi is None:
        _struct_d9fi = struct.Struct("<d9fi")
    return _struct_d9fi
