# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/RsPerceptionMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class RsPerceptionMsg(genpy.Message):
  _md5sum = "6ed114efee5ecd5e94f0dbd1aa700b6d"
  _type = "all_msgs/RsPerceptionMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Field Of LidarFrameMsg 
LidarFrameMsg           lidarframe 
std_msgs/Int32          device_id  

================================================================================
MSG: all_msgs/LidarFrameMsg
std_msgs/String frame_id
std_msgs/Float64 timestamp 
Pose             global_pose 
Point3d          gps_origin 
PoseMap          status_pose_map 
std_msgs/Int32   status 
Indices          valid_indices 
Objects          objects 

std_msgs/Bool  has_pointcloud 
Point4f[]      scan_pointcloud 

std_msgs/Bool  has_attention_objects 
Objects        attention_objects 

std_msgs/Bool  has_freespace 
FreeSpaceInfos freespace_infos 

std_msgs/Bool   has_lanes 
Lanes           lanes 

std_msgs/Bool   has_roadedges 
RoadEdges       roadedges 

std_msgs/Bool   has_sematice_indices 
Indices         non_ground_indices
Indices         ground_indices 
Indices         background_indices 

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: all_msgs/Pose
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 

std_msgs/Float32 roll 
std_msgs/Float32 pitch
std_msgs/Float32 yaw

std_msgs/Int32 status 

================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: all_msgs/Point3d
std_msgs/Float64 x 
std_msgs/Float64 y 
std_msgs/Float64 z 

================================================================================
MSG: all_msgs/PoseMap
AxisStatusPose[] status_poses 

================================================================================
MSG: all_msgs/AxisStatusPose
std_msgs/Int32 status 
Pose           pose 
================================================================================
MSG: all_msgs/Indices
std_msgs/Int32[]    indices
================================================================================
MSG: all_msgs/Objects
Object[]         objects
================================================================================
MSG: all_msgs/Object
CoreInfo coreinfo
std_msgs/Bool  hassupplmentinfo 
SupplementInfo supplementinfo 

================================================================================
MSG: all_msgs/CoreInfo
std_msgs/Float64 timestamp

std_msgs/Int32 priority_id
std_msgs/Float32 exist_confidence 
Point3f          center 
Point3f          center_cov 
Point3f          size 
Point3f          size_cov 
Point3f          direction 
Point3f          direction_cov         
std_msgs/Int32   type 
std_msgs/Float32 type_confidence 
std_msgs/Int32   attention_type 
std_msgs/Int32   motion_state
std_msgs/Int32   lane_pos
std_msgs/Int32   trakcer_id 
std_msgs/Float64 age 
Point3f          velocity 
Point3f          velocity_cov 
Point3f          acceleration 
Point3f          acceleration_cov 
std_msgs/Float32 angle_velocity 
std_msgs/Float32 angle_velocity_cov 
std_msgs/Float32 angle_acceleration 
std_msgs/Float32 angle_acceleration_cov  
Point3f          anchor 
Point3f          nearest_point 


================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: all_msgs/SupplementInfo
std_msgs/UInt32     unique_id

Point3f[]           polygon
std_msgs/Int32      left_point_index 
std_msgs/Int32      right_point_index 

std_msgs/Int32[]    cloud_indices

std_msgs/Float32[]  latent_types
std_msgs/Int32      size_type 
std_msgs/Int32      mode 
std_msgs/Bool       in_roi 
std_msgs/Int32      tracking_state
Point3f             geo_center 
Point3f             geo_size 



Point3f[]           trajectory 
Point3f[]           history_velocity
std_msgs/Int32[]    history_type 
std_msgs/Int32      gps_mode 
Point3d             gps_info 

================================================================================
MSG: std_msgs/UInt32
uint32 data
================================================================================
MSG: all_msgs/Point4f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
std_msgs/Float32 i 

================================================================================
MSG: all_msgs/FreeSpaceInfos
Point3f[]        fs_pts
std_msgs/Float32[] fs_confidence 

================================================================================
MSG: all_msgs/Lanes
Lane[] lanes
================================================================================
MSG: all_msgs/Lane
std_msgs/Int32   lane_id 
Curve            curve 
EndPoints        end_points 
std_msgs/Int32   measure_status  
std_msgs/Float32 confidence 

================================================================================
MSG: all_msgs/Curve
std_msgs/Float32 x_start 
std_msgs/Float32 x_end 
std_msgs/Float32 a 
std_msgs/Float32 b 
std_msgs/Float32 c 
std_msgs/Float32 d 
================================================================================
MSG: all_msgs/EndPoints
Point2f start 
Point2f end 

================================================================================
MSG: all_msgs/Point2f
std_msgs/Float32 x 
std_msgs/Float32 y 

================================================================================
MSG: all_msgs/RoadEdges
RoadEdge[] curbs

================================================================================
MSG: all_msgs/RoadEdge
std_msgs/Int32   roadedge_id  
Curve            curve 
EndPoints        end_points 
std_msgs/Int32   measure_status  
std_msgs/Float32 confidence 
"""
  __slots__ = ['lidarframe','device_id']
  _slot_types = ['all_msgs/LidarFrameMsg','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lidarframe,device_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RsPerceptionMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lidarframe is None:
        self.lidarframe = all_msgs.msg.LidarFrameMsg()
      if self.device_id is None:
        self.device_id = std_msgs.msg.Int32()
    else:
      self.lidarframe = all_msgs.msg.LidarFrameMsg()
      self.device_id = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.lidarframe.frame_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6fi3d().pack(_x.lidarframe.timestamp.data, _x.lidarframe.global_pose.x.data, _x.lidarframe.global_pose.y.data, _x.lidarframe.global_pose.z.data, _x.lidarframe.global_pose.roll.data, _x.lidarframe.global_pose.pitch.data, _x.lidarframe.global_pose.yaw.data, _x.lidarframe.global_pose.status.data, _x.lidarframe.gps_origin.x.data, _x.lidarframe.gps_origin.y.data, _x.lidarframe.gps_origin.z.data))
      length = len(self.lidarframe.status_pose_map.status_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.status_pose_map.status_poses:
        _v1 = val1.status
        _x = _v1.data
        buff.write(_get_struct_i().pack(_x))
        _v2 = val1.pose
        _v3 = _v2.x
        _x = _v3.data
        buff.write(_get_struct_f().pack(_x))
        _v4 = _v2.y
        _x = _v4.data
        buff.write(_get_struct_f().pack(_x))
        _v5 = _v2.z
        _x = _v5.data
        buff.write(_get_struct_f().pack(_x))
        _v6 = _v2.roll
        _x = _v6.data
        buff.write(_get_struct_f().pack(_x))
        _v7 = _v2.pitch
        _x = _v7.data
        buff.write(_get_struct_f().pack(_x))
        _v8 = _v2.yaw
        _x = _v8.data
        buff.write(_get_struct_f().pack(_x))
        _v9 = _v2.status
        _x = _v9.data
        buff.write(_get_struct_i().pack(_x))
      _x = self.lidarframe.status.data
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.valid_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.valid_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.objects.objects:
        _v10 = val1.coreinfo
        _v11 = _v10.timestamp
        _x = _v11.data
        buff.write(_get_struct_d().pack(_x))
        _v12 = _v10.priority_id
        _x = _v12.data
        buff.write(_get_struct_i().pack(_x))
        _v13 = _v10.exist_confidence
        _x = _v13.data
        buff.write(_get_struct_f().pack(_x))
        _v14 = _v10.center
        _v15 = _v14.x
        _x = _v15.data
        buff.write(_get_struct_f().pack(_x))
        _v16 = _v14.y
        _x = _v16.data
        buff.write(_get_struct_f().pack(_x))
        _v17 = _v14.z
        _x = _v17.data
        buff.write(_get_struct_f().pack(_x))
        _v18 = _v10.center_cov
        _v19 = _v18.x
        _x = _v19.data
        buff.write(_get_struct_f().pack(_x))
        _v20 = _v18.y
        _x = _v20.data
        buff.write(_get_struct_f().pack(_x))
        _v21 = _v18.z
        _x = _v21.data
        buff.write(_get_struct_f().pack(_x))
        _v22 = _v10.size
        _v23 = _v22.x
        _x = _v23.data
        buff.write(_get_struct_f().pack(_x))
        _v24 = _v22.y
        _x = _v24.data
        buff.write(_get_struct_f().pack(_x))
        _v25 = _v22.z
        _x = _v25.data
        buff.write(_get_struct_f().pack(_x))
        _v26 = _v10.size_cov
        _v27 = _v26.x
        _x = _v27.data
        buff.write(_get_struct_f().pack(_x))
        _v28 = _v26.y
        _x = _v28.data
        buff.write(_get_struct_f().pack(_x))
        _v29 = _v26.z
        _x = _v29.data
        buff.write(_get_struct_f().pack(_x))
        _v30 = _v10.direction
        _v31 = _v30.x
        _x = _v31.data
        buff.write(_get_struct_f().pack(_x))
        _v32 = _v30.y
        _x = _v32.data
        buff.write(_get_struct_f().pack(_x))
        _v33 = _v30.z
        _x = _v33.data
        buff.write(_get_struct_f().pack(_x))
        _v34 = _v10.direction_cov
        _v35 = _v34.x
        _x = _v35.data
        buff.write(_get_struct_f().pack(_x))
        _v36 = _v34.y
        _x = _v36.data
        buff.write(_get_struct_f().pack(_x))
        _v37 = _v34.z
        _x = _v37.data
        buff.write(_get_struct_f().pack(_x))
        _v38 = _v10.type
        _x = _v38.data
        buff.write(_get_struct_i().pack(_x))
        _v39 = _v10.type_confidence
        _x = _v39.data
        buff.write(_get_struct_f().pack(_x))
        _v40 = _v10.attention_type
        _x = _v40.data
        buff.write(_get_struct_i().pack(_x))
        _v41 = _v10.motion_state
        _x = _v41.data
        buff.write(_get_struct_i().pack(_x))
        _v42 = _v10.lane_pos
        _x = _v42.data
        buff.write(_get_struct_i().pack(_x))
        _v43 = _v10.trakcer_id
        _x = _v43.data
        buff.write(_get_struct_i().pack(_x))
        _v44 = _v10.age
        _x = _v44.data
        buff.write(_get_struct_d().pack(_x))
        _v45 = _v10.velocity
        _v46 = _v45.x
        _x = _v46.data
        buff.write(_get_struct_f().pack(_x))
        _v47 = _v45.y
        _x = _v47.data
        buff.write(_get_struct_f().pack(_x))
        _v48 = _v45.z
        _x = _v48.data
        buff.write(_get_struct_f().pack(_x))
        _v49 = _v10.velocity_cov
        _v50 = _v49.x
        _x = _v50.data
        buff.write(_get_struct_f().pack(_x))
        _v51 = _v49.y
        _x = _v51.data
        buff.write(_get_struct_f().pack(_x))
        _v52 = _v49.z
        _x = _v52.data
        buff.write(_get_struct_f().pack(_x))
        _v53 = _v10.acceleration
        _v54 = _v53.x
        _x = _v54.data
        buff.write(_get_struct_f().pack(_x))
        _v55 = _v53.y
        _x = _v55.data
        buff.write(_get_struct_f().pack(_x))
        _v56 = _v53.z
        _x = _v56.data
        buff.write(_get_struct_f().pack(_x))
        _v57 = _v10.acceleration_cov
        _v58 = _v57.x
        _x = _v58.data
        buff.write(_get_struct_f().pack(_x))
        _v59 = _v57.y
        _x = _v59.data
        buff.write(_get_struct_f().pack(_x))
        _v60 = _v57.z
        _x = _v60.data
        buff.write(_get_struct_f().pack(_x))
        _v61 = _v10.angle_velocity
        _x = _v61.data
        buff.write(_get_struct_f().pack(_x))
        _v62 = _v10.angle_velocity_cov
        _x = _v62.data
        buff.write(_get_struct_f().pack(_x))
        _v63 = _v10.angle_acceleration
        _x = _v63.data
        buff.write(_get_struct_f().pack(_x))
        _v64 = _v10.angle_acceleration_cov
        _x = _v64.data
        buff.write(_get_struct_f().pack(_x))
        _v65 = _v10.anchor
        _v66 = _v65.x
        _x = _v66.data
        buff.write(_get_struct_f().pack(_x))
        _v67 = _v65.y
        _x = _v67.data
        buff.write(_get_struct_f().pack(_x))
        _v68 = _v65.z
        _x = _v68.data
        buff.write(_get_struct_f().pack(_x))
        _v69 = _v10.nearest_point
        _v70 = _v69.x
        _x = _v70.data
        buff.write(_get_struct_f().pack(_x))
        _v71 = _v69.y
        _x = _v71.data
        buff.write(_get_struct_f().pack(_x))
        _v72 = _v69.z
        _x = _v72.data
        buff.write(_get_struct_f().pack(_x))
        _v73 = val1.hassupplmentinfo
        _x = _v73.data
        buff.write(_get_struct_B().pack(_x))
        _v74 = val1.supplementinfo
        _v75 = _v74.unique_id
        _x = _v75.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v74.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.polygon:
          _v76 = val3.x
          _x = _v76.data
          buff.write(_get_struct_f().pack(_x))
          _v77 = val3.y
          _x = _v77.data
          buff.write(_get_struct_f().pack(_x))
          _v78 = val3.z
          _x = _v78.data
          buff.write(_get_struct_f().pack(_x))
        _v79 = _v74.left_point_index
        _x = _v79.data
        buff.write(_get_struct_i().pack(_x))
        _v80 = _v74.right_point_index
        _x = _v80.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v74.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v74.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v81 = _v74.size_type
        _x = _v81.data
        buff.write(_get_struct_i().pack(_x))
        _v82 = _v74.mode
        _x = _v82.data
        buff.write(_get_struct_i().pack(_x))
        _v83 = _v74.in_roi
        _x = _v83.data
        buff.write(_get_struct_B().pack(_x))
        _v84 = _v74.tracking_state
        _x = _v84.data
        buff.write(_get_struct_i().pack(_x))
        _v85 = _v74.geo_center
        _v86 = _v85.x
        _x = _v86.data
        buff.write(_get_struct_f().pack(_x))
        _v87 = _v85.y
        _x = _v87.data
        buff.write(_get_struct_f().pack(_x))
        _v88 = _v85.z
        _x = _v88.data
        buff.write(_get_struct_f().pack(_x))
        _v89 = _v74.geo_size
        _v90 = _v89.x
        _x = _v90.data
        buff.write(_get_struct_f().pack(_x))
        _v91 = _v89.y
        _x = _v91.data
        buff.write(_get_struct_f().pack(_x))
        _v92 = _v89.z
        _x = _v92.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v74.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.trajectory:
          _v93 = val3.x
          _x = _v93.data
          buff.write(_get_struct_f().pack(_x))
          _v94 = val3.y
          _x = _v94.data
          buff.write(_get_struct_f().pack(_x))
          _v95 = val3.z
          _x = _v95.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v74.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.history_velocity:
          _v96 = val3.x
          _x = _v96.data
          buff.write(_get_struct_f().pack(_x))
          _v97 = val3.y
          _x = _v97.data
          buff.write(_get_struct_f().pack(_x))
          _v98 = val3.z
          _x = _v98.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v74.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v74.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v99 = _v74.gps_mode
        _x = _v99.data
        buff.write(_get_struct_i().pack(_x))
        _v100 = _v74.gps_info
        _v101 = _v100.x
        _x = _v101.data
        buff.write(_get_struct_d().pack(_x))
        _v102 = _v100.y
        _x = _v102.data
        buff.write(_get_struct_d().pack(_x))
        _v103 = _v100.z
        _x = _v103.data
        buff.write(_get_struct_d().pack(_x))
      _x = self.lidarframe.has_pointcloud.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.scan_pointcloud)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.scan_pointcloud:
        _v104 = val1.x
        _x = _v104.data
        buff.write(_get_struct_f().pack(_x))
        _v105 = val1.y
        _x = _v105.data
        buff.write(_get_struct_f().pack(_x))
        _v106 = val1.z
        _x = _v106.data
        buff.write(_get_struct_f().pack(_x))
        _v107 = val1.i
        _x = _v107.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_attention_objects.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.attention_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.attention_objects.objects:
        _v108 = val1.coreinfo
        _v109 = _v108.timestamp
        _x = _v109.data
        buff.write(_get_struct_d().pack(_x))
        _v110 = _v108.priority_id
        _x = _v110.data
        buff.write(_get_struct_i().pack(_x))
        _v111 = _v108.exist_confidence
        _x = _v111.data
        buff.write(_get_struct_f().pack(_x))
        _v112 = _v108.center
        _v113 = _v112.x
        _x = _v113.data
        buff.write(_get_struct_f().pack(_x))
        _v114 = _v112.y
        _x = _v114.data
        buff.write(_get_struct_f().pack(_x))
        _v115 = _v112.z
        _x = _v115.data
        buff.write(_get_struct_f().pack(_x))
        _v116 = _v108.center_cov
        _v117 = _v116.x
        _x = _v117.data
        buff.write(_get_struct_f().pack(_x))
        _v118 = _v116.y
        _x = _v118.data
        buff.write(_get_struct_f().pack(_x))
        _v119 = _v116.z
        _x = _v119.data
        buff.write(_get_struct_f().pack(_x))
        _v120 = _v108.size
        _v121 = _v120.x
        _x = _v121.data
        buff.write(_get_struct_f().pack(_x))
        _v122 = _v120.y
        _x = _v122.data
        buff.write(_get_struct_f().pack(_x))
        _v123 = _v120.z
        _x = _v123.data
        buff.write(_get_struct_f().pack(_x))
        _v124 = _v108.size_cov
        _v125 = _v124.x
        _x = _v125.data
        buff.write(_get_struct_f().pack(_x))
        _v126 = _v124.y
        _x = _v126.data
        buff.write(_get_struct_f().pack(_x))
        _v127 = _v124.z
        _x = _v127.data
        buff.write(_get_struct_f().pack(_x))
        _v128 = _v108.direction
        _v129 = _v128.x
        _x = _v129.data
        buff.write(_get_struct_f().pack(_x))
        _v130 = _v128.y
        _x = _v130.data
        buff.write(_get_struct_f().pack(_x))
        _v131 = _v128.z
        _x = _v131.data
        buff.write(_get_struct_f().pack(_x))
        _v132 = _v108.direction_cov
        _v133 = _v132.x
        _x = _v133.data
        buff.write(_get_struct_f().pack(_x))
        _v134 = _v132.y
        _x = _v134.data
        buff.write(_get_struct_f().pack(_x))
        _v135 = _v132.z
        _x = _v135.data
        buff.write(_get_struct_f().pack(_x))
        _v136 = _v108.type
        _x = _v136.data
        buff.write(_get_struct_i().pack(_x))
        _v137 = _v108.type_confidence
        _x = _v137.data
        buff.write(_get_struct_f().pack(_x))
        _v138 = _v108.attention_type
        _x = _v138.data
        buff.write(_get_struct_i().pack(_x))
        _v139 = _v108.motion_state
        _x = _v139.data
        buff.write(_get_struct_i().pack(_x))
        _v140 = _v108.lane_pos
        _x = _v140.data
        buff.write(_get_struct_i().pack(_x))
        _v141 = _v108.trakcer_id
        _x = _v141.data
        buff.write(_get_struct_i().pack(_x))
        _v142 = _v108.age
        _x = _v142.data
        buff.write(_get_struct_d().pack(_x))
        _v143 = _v108.velocity
        _v144 = _v143.x
        _x = _v144.data
        buff.write(_get_struct_f().pack(_x))
        _v145 = _v143.y
        _x = _v145.data
        buff.write(_get_struct_f().pack(_x))
        _v146 = _v143.z
        _x = _v146.data
        buff.write(_get_struct_f().pack(_x))
        _v147 = _v108.velocity_cov
        _v148 = _v147.x
        _x = _v148.data
        buff.write(_get_struct_f().pack(_x))
        _v149 = _v147.y
        _x = _v149.data
        buff.write(_get_struct_f().pack(_x))
        _v150 = _v147.z
        _x = _v150.data
        buff.write(_get_struct_f().pack(_x))
        _v151 = _v108.acceleration
        _v152 = _v151.x
        _x = _v152.data
        buff.write(_get_struct_f().pack(_x))
        _v153 = _v151.y
        _x = _v153.data
        buff.write(_get_struct_f().pack(_x))
        _v154 = _v151.z
        _x = _v154.data
        buff.write(_get_struct_f().pack(_x))
        _v155 = _v108.acceleration_cov
        _v156 = _v155.x
        _x = _v156.data
        buff.write(_get_struct_f().pack(_x))
        _v157 = _v155.y
        _x = _v157.data
        buff.write(_get_struct_f().pack(_x))
        _v158 = _v155.z
        _x = _v158.data
        buff.write(_get_struct_f().pack(_x))
        _v159 = _v108.angle_velocity
        _x = _v159.data
        buff.write(_get_struct_f().pack(_x))
        _v160 = _v108.angle_velocity_cov
        _x = _v160.data
        buff.write(_get_struct_f().pack(_x))
        _v161 = _v108.angle_acceleration
        _x = _v161.data
        buff.write(_get_struct_f().pack(_x))
        _v162 = _v108.angle_acceleration_cov
        _x = _v162.data
        buff.write(_get_struct_f().pack(_x))
        _v163 = _v108.anchor
        _v164 = _v163.x
        _x = _v164.data
        buff.write(_get_struct_f().pack(_x))
        _v165 = _v163.y
        _x = _v165.data
        buff.write(_get_struct_f().pack(_x))
        _v166 = _v163.z
        _x = _v166.data
        buff.write(_get_struct_f().pack(_x))
        _v167 = _v108.nearest_point
        _v168 = _v167.x
        _x = _v168.data
        buff.write(_get_struct_f().pack(_x))
        _v169 = _v167.y
        _x = _v169.data
        buff.write(_get_struct_f().pack(_x))
        _v170 = _v167.z
        _x = _v170.data
        buff.write(_get_struct_f().pack(_x))
        _v171 = val1.hassupplmentinfo
        _x = _v171.data
        buff.write(_get_struct_B().pack(_x))
        _v172 = val1.supplementinfo
        _v173 = _v172.unique_id
        _x = _v173.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v172.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.polygon:
          _v174 = val3.x
          _x = _v174.data
          buff.write(_get_struct_f().pack(_x))
          _v175 = val3.y
          _x = _v175.data
          buff.write(_get_struct_f().pack(_x))
          _v176 = val3.z
          _x = _v176.data
          buff.write(_get_struct_f().pack(_x))
        _v177 = _v172.left_point_index
        _x = _v177.data
        buff.write(_get_struct_i().pack(_x))
        _v178 = _v172.right_point_index
        _x = _v178.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v172.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v172.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v179 = _v172.size_type
        _x = _v179.data
        buff.write(_get_struct_i().pack(_x))
        _v180 = _v172.mode
        _x = _v180.data
        buff.write(_get_struct_i().pack(_x))
        _v181 = _v172.in_roi
        _x = _v181.data
        buff.write(_get_struct_B().pack(_x))
        _v182 = _v172.tracking_state
        _x = _v182.data
        buff.write(_get_struct_i().pack(_x))
        _v183 = _v172.geo_center
        _v184 = _v183.x
        _x = _v184.data
        buff.write(_get_struct_f().pack(_x))
        _v185 = _v183.y
        _x = _v185.data
        buff.write(_get_struct_f().pack(_x))
        _v186 = _v183.z
        _x = _v186.data
        buff.write(_get_struct_f().pack(_x))
        _v187 = _v172.geo_size
        _v188 = _v187.x
        _x = _v188.data
        buff.write(_get_struct_f().pack(_x))
        _v189 = _v187.y
        _x = _v189.data
        buff.write(_get_struct_f().pack(_x))
        _v190 = _v187.z
        _x = _v190.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v172.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.trajectory:
          _v191 = val3.x
          _x = _v191.data
          buff.write(_get_struct_f().pack(_x))
          _v192 = val3.y
          _x = _v192.data
          buff.write(_get_struct_f().pack(_x))
          _v193 = val3.z
          _x = _v193.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v172.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.history_velocity:
          _v194 = val3.x
          _x = _v194.data
          buff.write(_get_struct_f().pack(_x))
          _v195 = val3.y
          _x = _v195.data
          buff.write(_get_struct_f().pack(_x))
          _v196 = val3.z
          _x = _v196.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v172.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v172.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v197 = _v172.gps_mode
        _x = _v197.data
        buff.write(_get_struct_i().pack(_x))
        _v198 = _v172.gps_info
        _v199 = _v198.x
        _x = _v199.data
        buff.write(_get_struct_d().pack(_x))
        _v200 = _v198.y
        _x = _v200.data
        buff.write(_get_struct_d().pack(_x))
        _v201 = _v198.z
        _x = _v201.data
        buff.write(_get_struct_d().pack(_x))
      _x = self.lidarframe.has_freespace.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.freespace_infos.fs_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.freespace_infos.fs_pts:
        _v202 = val1.x
        _x = _v202.data
        buff.write(_get_struct_f().pack(_x))
        _v203 = val1.y
        _x = _v203.data
        buff.write(_get_struct_f().pack(_x))
        _v204 = val1.z
        _x = _v204.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.lidarframe.freespace_infos.fs_confidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.freespace_infos.fs_confidence:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_lanes.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.lanes.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.lanes.lanes:
        _v205 = val1.lane_id
        _x = _v205.data
        buff.write(_get_struct_i().pack(_x))
        _v206 = val1.curve
        _v207 = _v206.x_start
        _x = _v207.data
        buff.write(_get_struct_f().pack(_x))
        _v208 = _v206.x_end
        _x = _v208.data
        buff.write(_get_struct_f().pack(_x))
        _v209 = _v206.a
        _x = _v209.data
        buff.write(_get_struct_f().pack(_x))
        _v210 = _v206.b
        _x = _v210.data
        buff.write(_get_struct_f().pack(_x))
        _v211 = _v206.c
        _x = _v211.data
        buff.write(_get_struct_f().pack(_x))
        _v212 = _v206.d
        _x = _v212.data
        buff.write(_get_struct_f().pack(_x))
        _v213 = val1.end_points
        _v214 = _v213.start
        _v215 = _v214.x
        _x = _v215.data
        buff.write(_get_struct_f().pack(_x))
        _v216 = _v214.y
        _x = _v216.data
        buff.write(_get_struct_f().pack(_x))
        _v217 = _v213.end
        _v218 = _v217.x
        _x = _v218.data
        buff.write(_get_struct_f().pack(_x))
        _v219 = _v217.y
        _x = _v219.data
        buff.write(_get_struct_f().pack(_x))
        _v220 = val1.measure_status
        _x = _v220.data
        buff.write(_get_struct_i().pack(_x))
        _v221 = val1.confidence
        _x = _v221.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_roadedges.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.roadedges.curbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.roadedges.curbs:
        _v222 = val1.roadedge_id
        _x = _v222.data
        buff.write(_get_struct_i().pack(_x))
        _v223 = val1.curve
        _v224 = _v223.x_start
        _x = _v224.data
        buff.write(_get_struct_f().pack(_x))
        _v225 = _v223.x_end
        _x = _v225.data
        buff.write(_get_struct_f().pack(_x))
        _v226 = _v223.a
        _x = _v226.data
        buff.write(_get_struct_f().pack(_x))
        _v227 = _v223.b
        _x = _v227.data
        buff.write(_get_struct_f().pack(_x))
        _v228 = _v223.c
        _x = _v228.data
        buff.write(_get_struct_f().pack(_x))
        _v229 = _v223.d
        _x = _v229.data
        buff.write(_get_struct_f().pack(_x))
        _v230 = val1.end_points
        _v231 = _v230.start
        _v232 = _v231.x
        _x = _v232.data
        buff.write(_get_struct_f().pack(_x))
        _v233 = _v231.y
        _x = _v233.data
        buff.write(_get_struct_f().pack(_x))
        _v234 = _v230.end
        _v235 = _v234.x
        _x = _v235.data
        buff.write(_get_struct_f().pack(_x))
        _v236 = _v234.y
        _x = _v236.data
        buff.write(_get_struct_f().pack(_x))
        _v237 = val1.measure_status
        _x = _v237.data
        buff.write(_get_struct_i().pack(_x))
        _v238 = val1.confidence
        _x = _v238.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_sematice_indices.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.non_ground_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.non_ground_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.ground_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.ground_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.background_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.background_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      _x = self.device_id.data
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lidarframe is None:
        self.lidarframe = all_msgs.msg.LidarFrameMsg()
      if self.device_id is None:
        self.device_id = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidarframe.frame_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidarframe.frame_id.data = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.lidarframe.timestamp.data, _x.lidarframe.global_pose.x.data, _x.lidarframe.global_pose.y.data, _x.lidarframe.global_pose.z.data, _x.lidarframe.global_pose.roll.data, _x.lidarframe.global_pose.pitch.data, _x.lidarframe.global_pose.yaw.data, _x.lidarframe.global_pose.status.data, _x.lidarframe.gps_origin.x.data, _x.lidarframe.gps_origin.y.data, _x.lidarframe.gps_origin.z.data,) = _get_struct_d6fi3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.status_pose_map.status_poses = []
      for i in range(0, length):
        val1 = all_msgs.msg.AxisStatusPose()
        _v239 = val1.status
        start = end
        end += 4
        (_v239.data,) = _get_struct_i().unpack(str[start:end])
        _v240 = val1.pose
        _v241 = _v240.x
        start = end
        end += 4
        (_v241.data,) = _get_struct_f().unpack(str[start:end])
        _v242 = _v240.y
        start = end
        end += 4
        (_v242.data,) = _get_struct_f().unpack(str[start:end])
        _v243 = _v240.z
        start = end
        end += 4
        (_v243.data,) = _get_struct_f().unpack(str[start:end])
        _v244 = _v240.roll
        start = end
        end += 4
        (_v244.data,) = _get_struct_f().unpack(str[start:end])
        _v245 = _v240.pitch
        start = end
        end += 4
        (_v245.data,) = _get_struct_f().unpack(str[start:end])
        _v246 = _v240.yaw
        start = end
        end += 4
        (_v246.data,) = _get_struct_f().unpack(str[start:end])
        _v247 = _v240.status
        start = end
        end += 4
        (_v247.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.status_pose_map.status_poses.append(val1)
      start = end
      end += 4
      (self.lidarframe.status.data,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.valid_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.valid_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.objects.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v248 = val1.coreinfo
        _v249 = _v248.timestamp
        start = end
        end += 8
        (_v249.data,) = _get_struct_d().unpack(str[start:end])
        _v250 = _v248.priority_id
        start = end
        end += 4
        (_v250.data,) = _get_struct_i().unpack(str[start:end])
        _v251 = _v248.exist_confidence
        start = end
        end += 4
        (_v251.data,) = _get_struct_f().unpack(str[start:end])
        _v252 = _v248.center
        _v253 = _v252.x
        start = end
        end += 4
        (_v253.data,) = _get_struct_f().unpack(str[start:end])
        _v254 = _v252.y
        start = end
        end += 4
        (_v254.data,) = _get_struct_f().unpack(str[start:end])
        _v255 = _v252.z
        start = end
        end += 4
        (_v255.data,) = _get_struct_f().unpack(str[start:end])
        _v256 = _v248.center_cov
        _v257 = _v256.x
        start = end
        end += 4
        (_v257.data,) = _get_struct_f().unpack(str[start:end])
        _v258 = _v256.y
        start = end
        end += 4
        (_v258.data,) = _get_struct_f().unpack(str[start:end])
        _v259 = _v256.z
        start = end
        end += 4
        (_v259.data,) = _get_struct_f().unpack(str[start:end])
        _v260 = _v248.size
        _v261 = _v260.x
        start = end
        end += 4
        (_v261.data,) = _get_struct_f().unpack(str[start:end])
        _v262 = _v260.y
        start = end
        end += 4
        (_v262.data,) = _get_struct_f().unpack(str[start:end])
        _v263 = _v260.z
        start = end
        end += 4
        (_v263.data,) = _get_struct_f().unpack(str[start:end])
        _v264 = _v248.size_cov
        _v265 = _v264.x
        start = end
        end += 4
        (_v265.data,) = _get_struct_f().unpack(str[start:end])
        _v266 = _v264.y
        start = end
        end += 4
        (_v266.data,) = _get_struct_f().unpack(str[start:end])
        _v267 = _v264.z
        start = end
        end += 4
        (_v267.data,) = _get_struct_f().unpack(str[start:end])
        _v268 = _v248.direction
        _v269 = _v268.x
        start = end
        end += 4
        (_v269.data,) = _get_struct_f().unpack(str[start:end])
        _v270 = _v268.y
        start = end
        end += 4
        (_v270.data,) = _get_struct_f().unpack(str[start:end])
        _v271 = _v268.z
        start = end
        end += 4
        (_v271.data,) = _get_struct_f().unpack(str[start:end])
        _v272 = _v248.direction_cov
        _v273 = _v272.x
        start = end
        end += 4
        (_v273.data,) = _get_struct_f().unpack(str[start:end])
        _v274 = _v272.y
        start = end
        end += 4
        (_v274.data,) = _get_struct_f().unpack(str[start:end])
        _v275 = _v272.z
        start = end
        end += 4
        (_v275.data,) = _get_struct_f().unpack(str[start:end])
        _v276 = _v248.type
        start = end
        end += 4
        (_v276.data,) = _get_struct_i().unpack(str[start:end])
        _v277 = _v248.type_confidence
        start = end
        end += 4
        (_v277.data,) = _get_struct_f().unpack(str[start:end])
        _v278 = _v248.attention_type
        start = end
        end += 4
        (_v278.data,) = _get_struct_i().unpack(str[start:end])
        _v279 = _v248.motion_state
        start = end
        end += 4
        (_v279.data,) = _get_struct_i().unpack(str[start:end])
        _v280 = _v248.lane_pos
        start = end
        end += 4
        (_v280.data,) = _get_struct_i().unpack(str[start:end])
        _v281 = _v248.trakcer_id
        start = end
        end += 4
        (_v281.data,) = _get_struct_i().unpack(str[start:end])
        _v282 = _v248.age
        start = end
        end += 8
        (_v282.data,) = _get_struct_d().unpack(str[start:end])
        _v283 = _v248.velocity
        _v284 = _v283.x
        start = end
        end += 4
        (_v284.data,) = _get_struct_f().unpack(str[start:end])
        _v285 = _v283.y
        start = end
        end += 4
        (_v285.data,) = _get_struct_f().unpack(str[start:end])
        _v286 = _v283.z
        start = end
        end += 4
        (_v286.data,) = _get_struct_f().unpack(str[start:end])
        _v287 = _v248.velocity_cov
        _v288 = _v287.x
        start = end
        end += 4
        (_v288.data,) = _get_struct_f().unpack(str[start:end])
        _v289 = _v287.y
        start = end
        end += 4
        (_v289.data,) = _get_struct_f().unpack(str[start:end])
        _v290 = _v287.z
        start = end
        end += 4
        (_v290.data,) = _get_struct_f().unpack(str[start:end])
        _v291 = _v248.acceleration
        _v292 = _v291.x
        start = end
        end += 4
        (_v292.data,) = _get_struct_f().unpack(str[start:end])
        _v293 = _v291.y
        start = end
        end += 4
        (_v293.data,) = _get_struct_f().unpack(str[start:end])
        _v294 = _v291.z
        start = end
        end += 4
        (_v294.data,) = _get_struct_f().unpack(str[start:end])
        _v295 = _v248.acceleration_cov
        _v296 = _v295.x
        start = end
        end += 4
        (_v296.data,) = _get_struct_f().unpack(str[start:end])
        _v297 = _v295.y
        start = end
        end += 4
        (_v297.data,) = _get_struct_f().unpack(str[start:end])
        _v298 = _v295.z
        start = end
        end += 4
        (_v298.data,) = _get_struct_f().unpack(str[start:end])
        _v299 = _v248.angle_velocity
        start = end
        end += 4
        (_v299.data,) = _get_struct_f().unpack(str[start:end])
        _v300 = _v248.angle_velocity_cov
        start = end
        end += 4
        (_v300.data,) = _get_struct_f().unpack(str[start:end])
        _v301 = _v248.angle_acceleration
        start = end
        end += 4
        (_v301.data,) = _get_struct_f().unpack(str[start:end])
        _v302 = _v248.angle_acceleration_cov
        start = end
        end += 4
        (_v302.data,) = _get_struct_f().unpack(str[start:end])
        _v303 = _v248.anchor
        _v304 = _v303.x
        start = end
        end += 4
        (_v304.data,) = _get_struct_f().unpack(str[start:end])
        _v305 = _v303.y
        start = end
        end += 4
        (_v305.data,) = _get_struct_f().unpack(str[start:end])
        _v306 = _v303.z
        start = end
        end += 4
        (_v306.data,) = _get_struct_f().unpack(str[start:end])
        _v307 = _v248.nearest_point
        _v308 = _v307.x
        start = end
        end += 4
        (_v308.data,) = _get_struct_f().unpack(str[start:end])
        _v309 = _v307.y
        start = end
        end += 4
        (_v309.data,) = _get_struct_f().unpack(str[start:end])
        _v310 = _v307.z
        start = end
        end += 4
        (_v310.data,) = _get_struct_f().unpack(str[start:end])
        _v311 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v311.data,) = _get_struct_B().unpack(str[start:end])
        _v311.data = bool(_v311.data)
        _v312 = val1.supplementinfo
        _v313 = _v312.unique_id
        start = end
        end += 4
        (_v313.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v314 = val3.x
          start = end
          end += 4
          (_v314.data,) = _get_struct_f().unpack(str[start:end])
          _v315 = val3.y
          start = end
          end += 4
          (_v315.data,) = _get_struct_f().unpack(str[start:end])
          _v316 = val3.z
          start = end
          end += 4
          (_v316.data,) = _get_struct_f().unpack(str[start:end])
          _v312.polygon.append(val3)
        _v317 = _v312.left_point_index
        start = end
        end += 4
        (_v317.data,) = _get_struct_i().unpack(str[start:end])
        _v318 = _v312.right_point_index
        start = end
        end += 4
        (_v318.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v312.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v312.latent_types.append(val3)
        _v319 = _v312.size_type
        start = end
        end += 4
        (_v319.data,) = _get_struct_i().unpack(str[start:end])
        _v320 = _v312.mode
        start = end
        end += 4
        (_v320.data,) = _get_struct_i().unpack(str[start:end])
        _v321 = _v312.in_roi
        start = end
        end += 1
        (_v321.data,) = _get_struct_B().unpack(str[start:end])
        _v321.data = bool(_v321.data)
        _v322 = _v312.tracking_state
        start = end
        end += 4
        (_v322.data,) = _get_struct_i().unpack(str[start:end])
        _v323 = _v312.geo_center
        _v324 = _v323.x
        start = end
        end += 4
        (_v324.data,) = _get_struct_f().unpack(str[start:end])
        _v325 = _v323.y
        start = end
        end += 4
        (_v325.data,) = _get_struct_f().unpack(str[start:end])
        _v326 = _v323.z
        start = end
        end += 4
        (_v326.data,) = _get_struct_f().unpack(str[start:end])
        _v327 = _v312.geo_size
        _v328 = _v327.x
        start = end
        end += 4
        (_v328.data,) = _get_struct_f().unpack(str[start:end])
        _v329 = _v327.y
        start = end
        end += 4
        (_v329.data,) = _get_struct_f().unpack(str[start:end])
        _v330 = _v327.z
        start = end
        end += 4
        (_v330.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v331 = val3.x
          start = end
          end += 4
          (_v331.data,) = _get_struct_f().unpack(str[start:end])
          _v332 = val3.y
          start = end
          end += 4
          (_v332.data,) = _get_struct_f().unpack(str[start:end])
          _v333 = val3.z
          start = end
          end += 4
          (_v333.data,) = _get_struct_f().unpack(str[start:end])
          _v312.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v334 = val3.x
          start = end
          end += 4
          (_v334.data,) = _get_struct_f().unpack(str[start:end])
          _v335 = val3.y
          start = end
          end += 4
          (_v335.data,) = _get_struct_f().unpack(str[start:end])
          _v336 = val3.z
          start = end
          end += 4
          (_v336.data,) = _get_struct_f().unpack(str[start:end])
          _v312.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v312.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v312.history_type.append(val3)
        _v337 = _v312.gps_mode
        start = end
        end += 4
        (_v337.data,) = _get_struct_i().unpack(str[start:end])
        _v338 = _v312.gps_info
        _v339 = _v338.x
        start = end
        end += 8
        (_v339.data,) = _get_struct_d().unpack(str[start:end])
        _v340 = _v338.y
        start = end
        end += 8
        (_v340.data,) = _get_struct_d().unpack(str[start:end])
        _v341 = _v338.z
        start = end
        end += 8
        (_v341.data,) = _get_struct_d().unpack(str[start:end])
        self.lidarframe.objects.objects.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_pointcloud.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_pointcloud.data = bool(self.lidarframe.has_pointcloud.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.scan_pointcloud = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point4f()
        _v342 = val1.x
        start = end
        end += 4
        (_v342.data,) = _get_struct_f().unpack(str[start:end])
        _v343 = val1.y
        start = end
        end += 4
        (_v343.data,) = _get_struct_f().unpack(str[start:end])
        _v344 = val1.z
        start = end
        end += 4
        (_v344.data,) = _get_struct_f().unpack(str[start:end])
        _v345 = val1.i
        start = end
        end += 4
        (_v345.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.scan_pointcloud.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_attention_objects.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_attention_objects.data = bool(self.lidarframe.has_attention_objects.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.attention_objects.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v346 = val1.coreinfo
        _v347 = _v346.timestamp
        start = end
        end += 8
        (_v347.data,) = _get_struct_d().unpack(str[start:end])
        _v348 = _v346.priority_id
        start = end
        end += 4
        (_v348.data,) = _get_struct_i().unpack(str[start:end])
        _v349 = _v346.exist_confidence
        start = end
        end += 4
        (_v349.data,) = _get_struct_f().unpack(str[start:end])
        _v350 = _v346.center
        _v351 = _v350.x
        start = end
        end += 4
        (_v351.data,) = _get_struct_f().unpack(str[start:end])
        _v352 = _v350.y
        start = end
        end += 4
        (_v352.data,) = _get_struct_f().unpack(str[start:end])
        _v353 = _v350.z
        start = end
        end += 4
        (_v353.data,) = _get_struct_f().unpack(str[start:end])
        _v354 = _v346.center_cov
        _v355 = _v354.x
        start = end
        end += 4
        (_v355.data,) = _get_struct_f().unpack(str[start:end])
        _v356 = _v354.y
        start = end
        end += 4
        (_v356.data,) = _get_struct_f().unpack(str[start:end])
        _v357 = _v354.z
        start = end
        end += 4
        (_v357.data,) = _get_struct_f().unpack(str[start:end])
        _v358 = _v346.size
        _v359 = _v358.x
        start = end
        end += 4
        (_v359.data,) = _get_struct_f().unpack(str[start:end])
        _v360 = _v358.y
        start = end
        end += 4
        (_v360.data,) = _get_struct_f().unpack(str[start:end])
        _v361 = _v358.z
        start = end
        end += 4
        (_v361.data,) = _get_struct_f().unpack(str[start:end])
        _v362 = _v346.size_cov
        _v363 = _v362.x
        start = end
        end += 4
        (_v363.data,) = _get_struct_f().unpack(str[start:end])
        _v364 = _v362.y
        start = end
        end += 4
        (_v364.data,) = _get_struct_f().unpack(str[start:end])
        _v365 = _v362.z
        start = end
        end += 4
        (_v365.data,) = _get_struct_f().unpack(str[start:end])
        _v366 = _v346.direction
        _v367 = _v366.x
        start = end
        end += 4
        (_v367.data,) = _get_struct_f().unpack(str[start:end])
        _v368 = _v366.y
        start = end
        end += 4
        (_v368.data,) = _get_struct_f().unpack(str[start:end])
        _v369 = _v366.z
        start = end
        end += 4
        (_v369.data,) = _get_struct_f().unpack(str[start:end])
        _v370 = _v346.direction_cov
        _v371 = _v370.x
        start = end
        end += 4
        (_v371.data,) = _get_struct_f().unpack(str[start:end])
        _v372 = _v370.y
        start = end
        end += 4
        (_v372.data,) = _get_struct_f().unpack(str[start:end])
        _v373 = _v370.z
        start = end
        end += 4
        (_v373.data,) = _get_struct_f().unpack(str[start:end])
        _v374 = _v346.type
        start = end
        end += 4
        (_v374.data,) = _get_struct_i().unpack(str[start:end])
        _v375 = _v346.type_confidence
        start = end
        end += 4
        (_v375.data,) = _get_struct_f().unpack(str[start:end])
        _v376 = _v346.attention_type
        start = end
        end += 4
        (_v376.data,) = _get_struct_i().unpack(str[start:end])
        _v377 = _v346.motion_state
        start = end
        end += 4
        (_v377.data,) = _get_struct_i().unpack(str[start:end])
        _v378 = _v346.lane_pos
        start = end
        end += 4
        (_v378.data,) = _get_struct_i().unpack(str[start:end])
        _v379 = _v346.trakcer_id
        start = end
        end += 4
        (_v379.data,) = _get_struct_i().unpack(str[start:end])
        _v380 = _v346.age
        start = end
        end += 8
        (_v380.data,) = _get_struct_d().unpack(str[start:end])
        _v381 = _v346.velocity
        _v382 = _v381.x
        start = end
        end += 4
        (_v382.data,) = _get_struct_f().unpack(str[start:end])
        _v383 = _v381.y
        start = end
        end += 4
        (_v383.data,) = _get_struct_f().unpack(str[start:end])
        _v384 = _v381.z
        start = end
        end += 4
        (_v384.data,) = _get_struct_f().unpack(str[start:end])
        _v385 = _v346.velocity_cov
        _v386 = _v385.x
        start = end
        end += 4
        (_v386.data,) = _get_struct_f().unpack(str[start:end])
        _v387 = _v385.y
        start = end
        end += 4
        (_v387.data,) = _get_struct_f().unpack(str[start:end])
        _v388 = _v385.z
        start = end
        end += 4
        (_v388.data,) = _get_struct_f().unpack(str[start:end])
        _v389 = _v346.acceleration
        _v390 = _v389.x
        start = end
        end += 4
        (_v390.data,) = _get_struct_f().unpack(str[start:end])
        _v391 = _v389.y
        start = end
        end += 4
        (_v391.data,) = _get_struct_f().unpack(str[start:end])
        _v392 = _v389.z
        start = end
        end += 4
        (_v392.data,) = _get_struct_f().unpack(str[start:end])
        _v393 = _v346.acceleration_cov
        _v394 = _v393.x
        start = end
        end += 4
        (_v394.data,) = _get_struct_f().unpack(str[start:end])
        _v395 = _v393.y
        start = end
        end += 4
        (_v395.data,) = _get_struct_f().unpack(str[start:end])
        _v396 = _v393.z
        start = end
        end += 4
        (_v396.data,) = _get_struct_f().unpack(str[start:end])
        _v397 = _v346.angle_velocity
        start = end
        end += 4
        (_v397.data,) = _get_struct_f().unpack(str[start:end])
        _v398 = _v346.angle_velocity_cov
        start = end
        end += 4
        (_v398.data,) = _get_struct_f().unpack(str[start:end])
        _v399 = _v346.angle_acceleration
        start = end
        end += 4
        (_v399.data,) = _get_struct_f().unpack(str[start:end])
        _v400 = _v346.angle_acceleration_cov
        start = end
        end += 4
        (_v400.data,) = _get_struct_f().unpack(str[start:end])
        _v401 = _v346.anchor
        _v402 = _v401.x
        start = end
        end += 4
        (_v402.data,) = _get_struct_f().unpack(str[start:end])
        _v403 = _v401.y
        start = end
        end += 4
        (_v403.data,) = _get_struct_f().unpack(str[start:end])
        _v404 = _v401.z
        start = end
        end += 4
        (_v404.data,) = _get_struct_f().unpack(str[start:end])
        _v405 = _v346.nearest_point
        _v406 = _v405.x
        start = end
        end += 4
        (_v406.data,) = _get_struct_f().unpack(str[start:end])
        _v407 = _v405.y
        start = end
        end += 4
        (_v407.data,) = _get_struct_f().unpack(str[start:end])
        _v408 = _v405.z
        start = end
        end += 4
        (_v408.data,) = _get_struct_f().unpack(str[start:end])
        _v409 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v409.data,) = _get_struct_B().unpack(str[start:end])
        _v409.data = bool(_v409.data)
        _v410 = val1.supplementinfo
        _v411 = _v410.unique_id
        start = end
        end += 4
        (_v411.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v412 = val3.x
          start = end
          end += 4
          (_v412.data,) = _get_struct_f().unpack(str[start:end])
          _v413 = val3.y
          start = end
          end += 4
          (_v413.data,) = _get_struct_f().unpack(str[start:end])
          _v414 = val3.z
          start = end
          end += 4
          (_v414.data,) = _get_struct_f().unpack(str[start:end])
          _v410.polygon.append(val3)
        _v415 = _v410.left_point_index
        start = end
        end += 4
        (_v415.data,) = _get_struct_i().unpack(str[start:end])
        _v416 = _v410.right_point_index
        start = end
        end += 4
        (_v416.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v410.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v410.latent_types.append(val3)
        _v417 = _v410.size_type
        start = end
        end += 4
        (_v417.data,) = _get_struct_i().unpack(str[start:end])
        _v418 = _v410.mode
        start = end
        end += 4
        (_v418.data,) = _get_struct_i().unpack(str[start:end])
        _v419 = _v410.in_roi
        start = end
        end += 1
        (_v419.data,) = _get_struct_B().unpack(str[start:end])
        _v419.data = bool(_v419.data)
        _v420 = _v410.tracking_state
        start = end
        end += 4
        (_v420.data,) = _get_struct_i().unpack(str[start:end])
        _v421 = _v410.geo_center
        _v422 = _v421.x
        start = end
        end += 4
        (_v422.data,) = _get_struct_f().unpack(str[start:end])
        _v423 = _v421.y
        start = end
        end += 4
        (_v423.data,) = _get_struct_f().unpack(str[start:end])
        _v424 = _v421.z
        start = end
        end += 4
        (_v424.data,) = _get_struct_f().unpack(str[start:end])
        _v425 = _v410.geo_size
        _v426 = _v425.x
        start = end
        end += 4
        (_v426.data,) = _get_struct_f().unpack(str[start:end])
        _v427 = _v425.y
        start = end
        end += 4
        (_v427.data,) = _get_struct_f().unpack(str[start:end])
        _v428 = _v425.z
        start = end
        end += 4
        (_v428.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v429 = val3.x
          start = end
          end += 4
          (_v429.data,) = _get_struct_f().unpack(str[start:end])
          _v430 = val3.y
          start = end
          end += 4
          (_v430.data,) = _get_struct_f().unpack(str[start:end])
          _v431 = val3.z
          start = end
          end += 4
          (_v431.data,) = _get_struct_f().unpack(str[start:end])
          _v410.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v432 = val3.x
          start = end
          end += 4
          (_v432.data,) = _get_struct_f().unpack(str[start:end])
          _v433 = val3.y
          start = end
          end += 4
          (_v433.data,) = _get_struct_f().unpack(str[start:end])
          _v434 = val3.z
          start = end
          end += 4
          (_v434.data,) = _get_struct_f().unpack(str[start:end])
          _v410.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v410.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v410.history_type.append(val3)
        _v435 = _v410.gps_mode
        start = end
        end += 4
        (_v435.data,) = _get_struct_i().unpack(str[start:end])
        _v436 = _v410.gps_info
        _v437 = _v436.x
        start = end
        end += 8
        (_v437.data,) = _get_struct_d().unpack(str[start:end])
        _v438 = _v436.y
        start = end
        end += 8
        (_v438.data,) = _get_struct_d().unpack(str[start:end])
        _v439 = _v436.z
        start = end
        end += 8
        (_v439.data,) = _get_struct_d().unpack(str[start:end])
        self.lidarframe.attention_objects.objects.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_freespace.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_freespace.data = bool(self.lidarframe.has_freespace.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.freespace_infos.fs_pts = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v440 = val1.x
        start = end
        end += 4
        (_v440.data,) = _get_struct_f().unpack(str[start:end])
        _v441 = val1.y
        start = end
        end += 4
        (_v441.data,) = _get_struct_f().unpack(str[start:end])
        _v442 = val1.z
        start = end
        end += 4
        (_v442.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.freespace_infos.fs_pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.freespace_infos.fs_confidence = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.freespace_infos.fs_confidence.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_lanes.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_lanes.data = bool(self.lidarframe.has_lanes.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.lanes.lanes = []
      for i in range(0, length):
        val1 = all_msgs.msg.Lane()
        _v443 = val1.lane_id
        start = end
        end += 4
        (_v443.data,) = _get_struct_i().unpack(str[start:end])
        _v444 = val1.curve
        _v445 = _v444.x_start
        start = end
        end += 4
        (_v445.data,) = _get_struct_f().unpack(str[start:end])
        _v446 = _v444.x_end
        start = end
        end += 4
        (_v446.data,) = _get_struct_f().unpack(str[start:end])
        _v447 = _v444.a
        start = end
        end += 4
        (_v447.data,) = _get_struct_f().unpack(str[start:end])
        _v448 = _v444.b
        start = end
        end += 4
        (_v448.data,) = _get_struct_f().unpack(str[start:end])
        _v449 = _v444.c
        start = end
        end += 4
        (_v449.data,) = _get_struct_f().unpack(str[start:end])
        _v450 = _v444.d
        start = end
        end += 4
        (_v450.data,) = _get_struct_f().unpack(str[start:end])
        _v451 = val1.end_points
        _v452 = _v451.start
        _v453 = _v452.x
        start = end
        end += 4
        (_v453.data,) = _get_struct_f().unpack(str[start:end])
        _v454 = _v452.y
        start = end
        end += 4
        (_v454.data,) = _get_struct_f().unpack(str[start:end])
        _v455 = _v451.end
        _v456 = _v455.x
        start = end
        end += 4
        (_v456.data,) = _get_struct_f().unpack(str[start:end])
        _v457 = _v455.y
        start = end
        end += 4
        (_v457.data,) = _get_struct_f().unpack(str[start:end])
        _v458 = val1.measure_status
        start = end
        end += 4
        (_v458.data,) = _get_struct_i().unpack(str[start:end])
        _v459 = val1.confidence
        start = end
        end += 4
        (_v459.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.lanes.lanes.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_roadedges.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_roadedges.data = bool(self.lidarframe.has_roadedges.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.roadedges.curbs = []
      for i in range(0, length):
        val1 = all_msgs.msg.RoadEdge()
        _v460 = val1.roadedge_id
        start = end
        end += 4
        (_v460.data,) = _get_struct_i().unpack(str[start:end])
        _v461 = val1.curve
        _v462 = _v461.x_start
        start = end
        end += 4
        (_v462.data,) = _get_struct_f().unpack(str[start:end])
        _v463 = _v461.x_end
        start = end
        end += 4
        (_v463.data,) = _get_struct_f().unpack(str[start:end])
        _v464 = _v461.a
        start = end
        end += 4
        (_v464.data,) = _get_struct_f().unpack(str[start:end])
        _v465 = _v461.b
        start = end
        end += 4
        (_v465.data,) = _get_struct_f().unpack(str[start:end])
        _v466 = _v461.c
        start = end
        end += 4
        (_v466.data,) = _get_struct_f().unpack(str[start:end])
        _v467 = _v461.d
        start = end
        end += 4
        (_v467.data,) = _get_struct_f().unpack(str[start:end])
        _v468 = val1.end_points
        _v469 = _v468.start
        _v470 = _v469.x
        start = end
        end += 4
        (_v470.data,) = _get_struct_f().unpack(str[start:end])
        _v471 = _v469.y
        start = end
        end += 4
        (_v471.data,) = _get_struct_f().unpack(str[start:end])
        _v472 = _v468.end
        _v473 = _v472.x
        start = end
        end += 4
        (_v473.data,) = _get_struct_f().unpack(str[start:end])
        _v474 = _v472.y
        start = end
        end += 4
        (_v474.data,) = _get_struct_f().unpack(str[start:end])
        _v475 = val1.measure_status
        start = end
        end += 4
        (_v475.data,) = _get_struct_i().unpack(str[start:end])
        _v476 = val1.confidence
        start = end
        end += 4
        (_v476.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.roadedges.curbs.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_sematice_indices.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_sematice_indices.data = bool(self.lidarframe.has_sematice_indices.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.non_ground_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.non_ground_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.ground_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.ground_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.background_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.background_indices.indices.append(val1)
      start = end
      end += 4
      (self.device_id.data,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.lidarframe.frame_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d6fi3d().pack(_x.lidarframe.timestamp.data, _x.lidarframe.global_pose.x.data, _x.lidarframe.global_pose.y.data, _x.lidarframe.global_pose.z.data, _x.lidarframe.global_pose.roll.data, _x.lidarframe.global_pose.pitch.data, _x.lidarframe.global_pose.yaw.data, _x.lidarframe.global_pose.status.data, _x.lidarframe.gps_origin.x.data, _x.lidarframe.gps_origin.y.data, _x.lidarframe.gps_origin.z.data))
      length = len(self.lidarframe.status_pose_map.status_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.status_pose_map.status_poses:
        _v477 = val1.status
        _x = _v477.data
        buff.write(_get_struct_i().pack(_x))
        _v478 = val1.pose
        _v479 = _v478.x
        _x = _v479.data
        buff.write(_get_struct_f().pack(_x))
        _v480 = _v478.y
        _x = _v480.data
        buff.write(_get_struct_f().pack(_x))
        _v481 = _v478.z
        _x = _v481.data
        buff.write(_get_struct_f().pack(_x))
        _v482 = _v478.roll
        _x = _v482.data
        buff.write(_get_struct_f().pack(_x))
        _v483 = _v478.pitch
        _x = _v483.data
        buff.write(_get_struct_f().pack(_x))
        _v484 = _v478.yaw
        _x = _v484.data
        buff.write(_get_struct_f().pack(_x))
        _v485 = _v478.status
        _x = _v485.data
        buff.write(_get_struct_i().pack(_x))
      _x = self.lidarframe.status.data
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.valid_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.valid_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.objects.objects:
        _v486 = val1.coreinfo
        _v487 = _v486.timestamp
        _x = _v487.data
        buff.write(_get_struct_d().pack(_x))
        _v488 = _v486.priority_id
        _x = _v488.data
        buff.write(_get_struct_i().pack(_x))
        _v489 = _v486.exist_confidence
        _x = _v489.data
        buff.write(_get_struct_f().pack(_x))
        _v490 = _v486.center
        _v491 = _v490.x
        _x = _v491.data
        buff.write(_get_struct_f().pack(_x))
        _v492 = _v490.y
        _x = _v492.data
        buff.write(_get_struct_f().pack(_x))
        _v493 = _v490.z
        _x = _v493.data
        buff.write(_get_struct_f().pack(_x))
        _v494 = _v486.center_cov
        _v495 = _v494.x
        _x = _v495.data
        buff.write(_get_struct_f().pack(_x))
        _v496 = _v494.y
        _x = _v496.data
        buff.write(_get_struct_f().pack(_x))
        _v497 = _v494.z
        _x = _v497.data
        buff.write(_get_struct_f().pack(_x))
        _v498 = _v486.size
        _v499 = _v498.x
        _x = _v499.data
        buff.write(_get_struct_f().pack(_x))
        _v500 = _v498.y
        _x = _v500.data
        buff.write(_get_struct_f().pack(_x))
        _v501 = _v498.z
        _x = _v501.data
        buff.write(_get_struct_f().pack(_x))
        _v502 = _v486.size_cov
        _v503 = _v502.x
        _x = _v503.data
        buff.write(_get_struct_f().pack(_x))
        _v504 = _v502.y
        _x = _v504.data
        buff.write(_get_struct_f().pack(_x))
        _v505 = _v502.z
        _x = _v505.data
        buff.write(_get_struct_f().pack(_x))
        _v506 = _v486.direction
        _v507 = _v506.x
        _x = _v507.data
        buff.write(_get_struct_f().pack(_x))
        _v508 = _v506.y
        _x = _v508.data
        buff.write(_get_struct_f().pack(_x))
        _v509 = _v506.z
        _x = _v509.data
        buff.write(_get_struct_f().pack(_x))
        _v510 = _v486.direction_cov
        _v511 = _v510.x
        _x = _v511.data
        buff.write(_get_struct_f().pack(_x))
        _v512 = _v510.y
        _x = _v512.data
        buff.write(_get_struct_f().pack(_x))
        _v513 = _v510.z
        _x = _v513.data
        buff.write(_get_struct_f().pack(_x))
        _v514 = _v486.type
        _x = _v514.data
        buff.write(_get_struct_i().pack(_x))
        _v515 = _v486.type_confidence
        _x = _v515.data
        buff.write(_get_struct_f().pack(_x))
        _v516 = _v486.attention_type
        _x = _v516.data
        buff.write(_get_struct_i().pack(_x))
        _v517 = _v486.motion_state
        _x = _v517.data
        buff.write(_get_struct_i().pack(_x))
        _v518 = _v486.lane_pos
        _x = _v518.data
        buff.write(_get_struct_i().pack(_x))
        _v519 = _v486.trakcer_id
        _x = _v519.data
        buff.write(_get_struct_i().pack(_x))
        _v520 = _v486.age
        _x = _v520.data
        buff.write(_get_struct_d().pack(_x))
        _v521 = _v486.velocity
        _v522 = _v521.x
        _x = _v522.data
        buff.write(_get_struct_f().pack(_x))
        _v523 = _v521.y
        _x = _v523.data
        buff.write(_get_struct_f().pack(_x))
        _v524 = _v521.z
        _x = _v524.data
        buff.write(_get_struct_f().pack(_x))
        _v525 = _v486.velocity_cov
        _v526 = _v525.x
        _x = _v526.data
        buff.write(_get_struct_f().pack(_x))
        _v527 = _v525.y
        _x = _v527.data
        buff.write(_get_struct_f().pack(_x))
        _v528 = _v525.z
        _x = _v528.data
        buff.write(_get_struct_f().pack(_x))
        _v529 = _v486.acceleration
        _v530 = _v529.x
        _x = _v530.data
        buff.write(_get_struct_f().pack(_x))
        _v531 = _v529.y
        _x = _v531.data
        buff.write(_get_struct_f().pack(_x))
        _v532 = _v529.z
        _x = _v532.data
        buff.write(_get_struct_f().pack(_x))
        _v533 = _v486.acceleration_cov
        _v534 = _v533.x
        _x = _v534.data
        buff.write(_get_struct_f().pack(_x))
        _v535 = _v533.y
        _x = _v535.data
        buff.write(_get_struct_f().pack(_x))
        _v536 = _v533.z
        _x = _v536.data
        buff.write(_get_struct_f().pack(_x))
        _v537 = _v486.angle_velocity
        _x = _v537.data
        buff.write(_get_struct_f().pack(_x))
        _v538 = _v486.angle_velocity_cov
        _x = _v538.data
        buff.write(_get_struct_f().pack(_x))
        _v539 = _v486.angle_acceleration
        _x = _v539.data
        buff.write(_get_struct_f().pack(_x))
        _v540 = _v486.angle_acceleration_cov
        _x = _v540.data
        buff.write(_get_struct_f().pack(_x))
        _v541 = _v486.anchor
        _v542 = _v541.x
        _x = _v542.data
        buff.write(_get_struct_f().pack(_x))
        _v543 = _v541.y
        _x = _v543.data
        buff.write(_get_struct_f().pack(_x))
        _v544 = _v541.z
        _x = _v544.data
        buff.write(_get_struct_f().pack(_x))
        _v545 = _v486.nearest_point
        _v546 = _v545.x
        _x = _v546.data
        buff.write(_get_struct_f().pack(_x))
        _v547 = _v545.y
        _x = _v547.data
        buff.write(_get_struct_f().pack(_x))
        _v548 = _v545.z
        _x = _v548.data
        buff.write(_get_struct_f().pack(_x))
        _v549 = val1.hassupplmentinfo
        _x = _v549.data
        buff.write(_get_struct_B().pack(_x))
        _v550 = val1.supplementinfo
        _v551 = _v550.unique_id
        _x = _v551.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v550.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.polygon:
          _v552 = val3.x
          _x = _v552.data
          buff.write(_get_struct_f().pack(_x))
          _v553 = val3.y
          _x = _v553.data
          buff.write(_get_struct_f().pack(_x))
          _v554 = val3.z
          _x = _v554.data
          buff.write(_get_struct_f().pack(_x))
        _v555 = _v550.left_point_index
        _x = _v555.data
        buff.write(_get_struct_i().pack(_x))
        _v556 = _v550.right_point_index
        _x = _v556.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v550.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v550.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v557 = _v550.size_type
        _x = _v557.data
        buff.write(_get_struct_i().pack(_x))
        _v558 = _v550.mode
        _x = _v558.data
        buff.write(_get_struct_i().pack(_x))
        _v559 = _v550.in_roi
        _x = _v559.data
        buff.write(_get_struct_B().pack(_x))
        _v560 = _v550.tracking_state
        _x = _v560.data
        buff.write(_get_struct_i().pack(_x))
        _v561 = _v550.geo_center
        _v562 = _v561.x
        _x = _v562.data
        buff.write(_get_struct_f().pack(_x))
        _v563 = _v561.y
        _x = _v563.data
        buff.write(_get_struct_f().pack(_x))
        _v564 = _v561.z
        _x = _v564.data
        buff.write(_get_struct_f().pack(_x))
        _v565 = _v550.geo_size
        _v566 = _v565.x
        _x = _v566.data
        buff.write(_get_struct_f().pack(_x))
        _v567 = _v565.y
        _x = _v567.data
        buff.write(_get_struct_f().pack(_x))
        _v568 = _v565.z
        _x = _v568.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v550.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.trajectory:
          _v569 = val3.x
          _x = _v569.data
          buff.write(_get_struct_f().pack(_x))
          _v570 = val3.y
          _x = _v570.data
          buff.write(_get_struct_f().pack(_x))
          _v571 = val3.z
          _x = _v571.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v550.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.history_velocity:
          _v572 = val3.x
          _x = _v572.data
          buff.write(_get_struct_f().pack(_x))
          _v573 = val3.y
          _x = _v573.data
          buff.write(_get_struct_f().pack(_x))
          _v574 = val3.z
          _x = _v574.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v550.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v550.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v575 = _v550.gps_mode
        _x = _v575.data
        buff.write(_get_struct_i().pack(_x))
        _v576 = _v550.gps_info
        _v577 = _v576.x
        _x = _v577.data
        buff.write(_get_struct_d().pack(_x))
        _v578 = _v576.y
        _x = _v578.data
        buff.write(_get_struct_d().pack(_x))
        _v579 = _v576.z
        _x = _v579.data
        buff.write(_get_struct_d().pack(_x))
      _x = self.lidarframe.has_pointcloud.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.scan_pointcloud)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.scan_pointcloud:
        _v580 = val1.x
        _x = _v580.data
        buff.write(_get_struct_f().pack(_x))
        _v581 = val1.y
        _x = _v581.data
        buff.write(_get_struct_f().pack(_x))
        _v582 = val1.z
        _x = _v582.data
        buff.write(_get_struct_f().pack(_x))
        _v583 = val1.i
        _x = _v583.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_attention_objects.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.attention_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.attention_objects.objects:
        _v584 = val1.coreinfo
        _v585 = _v584.timestamp
        _x = _v585.data
        buff.write(_get_struct_d().pack(_x))
        _v586 = _v584.priority_id
        _x = _v586.data
        buff.write(_get_struct_i().pack(_x))
        _v587 = _v584.exist_confidence
        _x = _v587.data
        buff.write(_get_struct_f().pack(_x))
        _v588 = _v584.center
        _v589 = _v588.x
        _x = _v589.data
        buff.write(_get_struct_f().pack(_x))
        _v590 = _v588.y
        _x = _v590.data
        buff.write(_get_struct_f().pack(_x))
        _v591 = _v588.z
        _x = _v591.data
        buff.write(_get_struct_f().pack(_x))
        _v592 = _v584.center_cov
        _v593 = _v592.x
        _x = _v593.data
        buff.write(_get_struct_f().pack(_x))
        _v594 = _v592.y
        _x = _v594.data
        buff.write(_get_struct_f().pack(_x))
        _v595 = _v592.z
        _x = _v595.data
        buff.write(_get_struct_f().pack(_x))
        _v596 = _v584.size
        _v597 = _v596.x
        _x = _v597.data
        buff.write(_get_struct_f().pack(_x))
        _v598 = _v596.y
        _x = _v598.data
        buff.write(_get_struct_f().pack(_x))
        _v599 = _v596.z
        _x = _v599.data
        buff.write(_get_struct_f().pack(_x))
        _v600 = _v584.size_cov
        _v601 = _v600.x
        _x = _v601.data
        buff.write(_get_struct_f().pack(_x))
        _v602 = _v600.y
        _x = _v602.data
        buff.write(_get_struct_f().pack(_x))
        _v603 = _v600.z
        _x = _v603.data
        buff.write(_get_struct_f().pack(_x))
        _v604 = _v584.direction
        _v605 = _v604.x
        _x = _v605.data
        buff.write(_get_struct_f().pack(_x))
        _v606 = _v604.y
        _x = _v606.data
        buff.write(_get_struct_f().pack(_x))
        _v607 = _v604.z
        _x = _v607.data
        buff.write(_get_struct_f().pack(_x))
        _v608 = _v584.direction_cov
        _v609 = _v608.x
        _x = _v609.data
        buff.write(_get_struct_f().pack(_x))
        _v610 = _v608.y
        _x = _v610.data
        buff.write(_get_struct_f().pack(_x))
        _v611 = _v608.z
        _x = _v611.data
        buff.write(_get_struct_f().pack(_x))
        _v612 = _v584.type
        _x = _v612.data
        buff.write(_get_struct_i().pack(_x))
        _v613 = _v584.type_confidence
        _x = _v613.data
        buff.write(_get_struct_f().pack(_x))
        _v614 = _v584.attention_type
        _x = _v614.data
        buff.write(_get_struct_i().pack(_x))
        _v615 = _v584.motion_state
        _x = _v615.data
        buff.write(_get_struct_i().pack(_x))
        _v616 = _v584.lane_pos
        _x = _v616.data
        buff.write(_get_struct_i().pack(_x))
        _v617 = _v584.trakcer_id
        _x = _v617.data
        buff.write(_get_struct_i().pack(_x))
        _v618 = _v584.age
        _x = _v618.data
        buff.write(_get_struct_d().pack(_x))
        _v619 = _v584.velocity
        _v620 = _v619.x
        _x = _v620.data
        buff.write(_get_struct_f().pack(_x))
        _v621 = _v619.y
        _x = _v621.data
        buff.write(_get_struct_f().pack(_x))
        _v622 = _v619.z
        _x = _v622.data
        buff.write(_get_struct_f().pack(_x))
        _v623 = _v584.velocity_cov
        _v624 = _v623.x
        _x = _v624.data
        buff.write(_get_struct_f().pack(_x))
        _v625 = _v623.y
        _x = _v625.data
        buff.write(_get_struct_f().pack(_x))
        _v626 = _v623.z
        _x = _v626.data
        buff.write(_get_struct_f().pack(_x))
        _v627 = _v584.acceleration
        _v628 = _v627.x
        _x = _v628.data
        buff.write(_get_struct_f().pack(_x))
        _v629 = _v627.y
        _x = _v629.data
        buff.write(_get_struct_f().pack(_x))
        _v630 = _v627.z
        _x = _v630.data
        buff.write(_get_struct_f().pack(_x))
        _v631 = _v584.acceleration_cov
        _v632 = _v631.x
        _x = _v632.data
        buff.write(_get_struct_f().pack(_x))
        _v633 = _v631.y
        _x = _v633.data
        buff.write(_get_struct_f().pack(_x))
        _v634 = _v631.z
        _x = _v634.data
        buff.write(_get_struct_f().pack(_x))
        _v635 = _v584.angle_velocity
        _x = _v635.data
        buff.write(_get_struct_f().pack(_x))
        _v636 = _v584.angle_velocity_cov
        _x = _v636.data
        buff.write(_get_struct_f().pack(_x))
        _v637 = _v584.angle_acceleration
        _x = _v637.data
        buff.write(_get_struct_f().pack(_x))
        _v638 = _v584.angle_acceleration_cov
        _x = _v638.data
        buff.write(_get_struct_f().pack(_x))
        _v639 = _v584.anchor
        _v640 = _v639.x
        _x = _v640.data
        buff.write(_get_struct_f().pack(_x))
        _v641 = _v639.y
        _x = _v641.data
        buff.write(_get_struct_f().pack(_x))
        _v642 = _v639.z
        _x = _v642.data
        buff.write(_get_struct_f().pack(_x))
        _v643 = _v584.nearest_point
        _v644 = _v643.x
        _x = _v644.data
        buff.write(_get_struct_f().pack(_x))
        _v645 = _v643.y
        _x = _v645.data
        buff.write(_get_struct_f().pack(_x))
        _v646 = _v643.z
        _x = _v646.data
        buff.write(_get_struct_f().pack(_x))
        _v647 = val1.hassupplmentinfo
        _x = _v647.data
        buff.write(_get_struct_B().pack(_x))
        _v648 = val1.supplementinfo
        _v649 = _v648.unique_id
        _x = _v649.data
        buff.write(_get_struct_I().pack(_x))
        length = len(_v648.polygon)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.polygon:
          _v650 = val3.x
          _x = _v650.data
          buff.write(_get_struct_f().pack(_x))
          _v651 = val3.y
          _x = _v651.data
          buff.write(_get_struct_f().pack(_x))
          _v652 = val3.z
          _x = _v652.data
          buff.write(_get_struct_f().pack(_x))
        _v653 = _v648.left_point_index
        _x = _v653.data
        buff.write(_get_struct_i().pack(_x))
        _v654 = _v648.right_point_index
        _x = _v654.data
        buff.write(_get_struct_i().pack(_x))
        length = len(_v648.cloud_indices)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.cloud_indices:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        length = len(_v648.latent_types)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.latent_types:
          _x = val3.data
          buff.write(_get_struct_f().pack(_x))
        _v655 = _v648.size_type
        _x = _v655.data
        buff.write(_get_struct_i().pack(_x))
        _v656 = _v648.mode
        _x = _v656.data
        buff.write(_get_struct_i().pack(_x))
        _v657 = _v648.in_roi
        _x = _v657.data
        buff.write(_get_struct_B().pack(_x))
        _v658 = _v648.tracking_state
        _x = _v658.data
        buff.write(_get_struct_i().pack(_x))
        _v659 = _v648.geo_center
        _v660 = _v659.x
        _x = _v660.data
        buff.write(_get_struct_f().pack(_x))
        _v661 = _v659.y
        _x = _v661.data
        buff.write(_get_struct_f().pack(_x))
        _v662 = _v659.z
        _x = _v662.data
        buff.write(_get_struct_f().pack(_x))
        _v663 = _v648.geo_size
        _v664 = _v663.x
        _x = _v664.data
        buff.write(_get_struct_f().pack(_x))
        _v665 = _v663.y
        _x = _v665.data
        buff.write(_get_struct_f().pack(_x))
        _v666 = _v663.z
        _x = _v666.data
        buff.write(_get_struct_f().pack(_x))
        length = len(_v648.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.trajectory:
          _v667 = val3.x
          _x = _v667.data
          buff.write(_get_struct_f().pack(_x))
          _v668 = val3.y
          _x = _v668.data
          buff.write(_get_struct_f().pack(_x))
          _v669 = val3.z
          _x = _v669.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v648.history_velocity)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.history_velocity:
          _v670 = val3.x
          _x = _v670.data
          buff.write(_get_struct_f().pack(_x))
          _v671 = val3.y
          _x = _v671.data
          buff.write(_get_struct_f().pack(_x))
          _v672 = val3.z
          _x = _v672.data
          buff.write(_get_struct_f().pack(_x))
        length = len(_v648.history_type)
        buff.write(_struct_I.pack(length))
        for val3 in _v648.history_type:
          _x = val3.data
          buff.write(_get_struct_i().pack(_x))
        _v673 = _v648.gps_mode
        _x = _v673.data
        buff.write(_get_struct_i().pack(_x))
        _v674 = _v648.gps_info
        _v675 = _v674.x
        _x = _v675.data
        buff.write(_get_struct_d().pack(_x))
        _v676 = _v674.y
        _x = _v676.data
        buff.write(_get_struct_d().pack(_x))
        _v677 = _v674.z
        _x = _v677.data
        buff.write(_get_struct_d().pack(_x))
      _x = self.lidarframe.has_freespace.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.freespace_infos.fs_pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.freespace_infos.fs_pts:
        _v678 = val1.x
        _x = _v678.data
        buff.write(_get_struct_f().pack(_x))
        _v679 = val1.y
        _x = _v679.data
        buff.write(_get_struct_f().pack(_x))
        _v680 = val1.z
        _x = _v680.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.lidarframe.freespace_infos.fs_confidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.freespace_infos.fs_confidence:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_lanes.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.lanes.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.lanes.lanes:
        _v681 = val1.lane_id
        _x = _v681.data
        buff.write(_get_struct_i().pack(_x))
        _v682 = val1.curve
        _v683 = _v682.x_start
        _x = _v683.data
        buff.write(_get_struct_f().pack(_x))
        _v684 = _v682.x_end
        _x = _v684.data
        buff.write(_get_struct_f().pack(_x))
        _v685 = _v682.a
        _x = _v685.data
        buff.write(_get_struct_f().pack(_x))
        _v686 = _v682.b
        _x = _v686.data
        buff.write(_get_struct_f().pack(_x))
        _v687 = _v682.c
        _x = _v687.data
        buff.write(_get_struct_f().pack(_x))
        _v688 = _v682.d
        _x = _v688.data
        buff.write(_get_struct_f().pack(_x))
        _v689 = val1.end_points
        _v690 = _v689.start
        _v691 = _v690.x
        _x = _v691.data
        buff.write(_get_struct_f().pack(_x))
        _v692 = _v690.y
        _x = _v692.data
        buff.write(_get_struct_f().pack(_x))
        _v693 = _v689.end
        _v694 = _v693.x
        _x = _v694.data
        buff.write(_get_struct_f().pack(_x))
        _v695 = _v693.y
        _x = _v695.data
        buff.write(_get_struct_f().pack(_x))
        _v696 = val1.measure_status
        _x = _v696.data
        buff.write(_get_struct_i().pack(_x))
        _v697 = val1.confidence
        _x = _v697.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_roadedges.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.roadedges.curbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.roadedges.curbs:
        _v698 = val1.roadedge_id
        _x = _v698.data
        buff.write(_get_struct_i().pack(_x))
        _v699 = val1.curve
        _v700 = _v699.x_start
        _x = _v700.data
        buff.write(_get_struct_f().pack(_x))
        _v701 = _v699.x_end
        _x = _v701.data
        buff.write(_get_struct_f().pack(_x))
        _v702 = _v699.a
        _x = _v702.data
        buff.write(_get_struct_f().pack(_x))
        _v703 = _v699.b
        _x = _v703.data
        buff.write(_get_struct_f().pack(_x))
        _v704 = _v699.c
        _x = _v704.data
        buff.write(_get_struct_f().pack(_x))
        _v705 = _v699.d
        _x = _v705.data
        buff.write(_get_struct_f().pack(_x))
        _v706 = val1.end_points
        _v707 = _v706.start
        _v708 = _v707.x
        _x = _v708.data
        buff.write(_get_struct_f().pack(_x))
        _v709 = _v707.y
        _x = _v709.data
        buff.write(_get_struct_f().pack(_x))
        _v710 = _v706.end
        _v711 = _v710.x
        _x = _v711.data
        buff.write(_get_struct_f().pack(_x))
        _v712 = _v710.y
        _x = _v712.data
        buff.write(_get_struct_f().pack(_x))
        _v713 = val1.measure_status
        _x = _v713.data
        buff.write(_get_struct_i().pack(_x))
        _v714 = val1.confidence
        _x = _v714.data
        buff.write(_get_struct_f().pack(_x))
      _x = self.lidarframe.has_sematice_indices.data
      buff.write(_get_struct_B().pack(_x))
      length = len(self.lidarframe.non_ground_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.non_ground_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.ground_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.ground_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.lidarframe.background_indices.indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.lidarframe.background_indices.indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      _x = self.device_id.data
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lidarframe is None:
        self.lidarframe = all_msgs.msg.LidarFrameMsg()
      if self.device_id is None:
        self.device_id = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lidarframe.frame_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.lidarframe.frame_id.data = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.lidarframe.timestamp.data, _x.lidarframe.global_pose.x.data, _x.lidarframe.global_pose.y.data, _x.lidarframe.global_pose.z.data, _x.lidarframe.global_pose.roll.data, _x.lidarframe.global_pose.pitch.data, _x.lidarframe.global_pose.yaw.data, _x.lidarframe.global_pose.status.data, _x.lidarframe.gps_origin.x.data, _x.lidarframe.gps_origin.y.data, _x.lidarframe.gps_origin.z.data,) = _get_struct_d6fi3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.status_pose_map.status_poses = []
      for i in range(0, length):
        val1 = all_msgs.msg.AxisStatusPose()
        _v715 = val1.status
        start = end
        end += 4
        (_v715.data,) = _get_struct_i().unpack(str[start:end])
        _v716 = val1.pose
        _v717 = _v716.x
        start = end
        end += 4
        (_v717.data,) = _get_struct_f().unpack(str[start:end])
        _v718 = _v716.y
        start = end
        end += 4
        (_v718.data,) = _get_struct_f().unpack(str[start:end])
        _v719 = _v716.z
        start = end
        end += 4
        (_v719.data,) = _get_struct_f().unpack(str[start:end])
        _v720 = _v716.roll
        start = end
        end += 4
        (_v720.data,) = _get_struct_f().unpack(str[start:end])
        _v721 = _v716.pitch
        start = end
        end += 4
        (_v721.data,) = _get_struct_f().unpack(str[start:end])
        _v722 = _v716.yaw
        start = end
        end += 4
        (_v722.data,) = _get_struct_f().unpack(str[start:end])
        _v723 = _v716.status
        start = end
        end += 4
        (_v723.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.status_pose_map.status_poses.append(val1)
      start = end
      end += 4
      (self.lidarframe.status.data,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.valid_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.valid_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.objects.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v724 = val1.coreinfo
        _v725 = _v724.timestamp
        start = end
        end += 8
        (_v725.data,) = _get_struct_d().unpack(str[start:end])
        _v726 = _v724.priority_id
        start = end
        end += 4
        (_v726.data,) = _get_struct_i().unpack(str[start:end])
        _v727 = _v724.exist_confidence
        start = end
        end += 4
        (_v727.data,) = _get_struct_f().unpack(str[start:end])
        _v728 = _v724.center
        _v729 = _v728.x
        start = end
        end += 4
        (_v729.data,) = _get_struct_f().unpack(str[start:end])
        _v730 = _v728.y
        start = end
        end += 4
        (_v730.data,) = _get_struct_f().unpack(str[start:end])
        _v731 = _v728.z
        start = end
        end += 4
        (_v731.data,) = _get_struct_f().unpack(str[start:end])
        _v732 = _v724.center_cov
        _v733 = _v732.x
        start = end
        end += 4
        (_v733.data,) = _get_struct_f().unpack(str[start:end])
        _v734 = _v732.y
        start = end
        end += 4
        (_v734.data,) = _get_struct_f().unpack(str[start:end])
        _v735 = _v732.z
        start = end
        end += 4
        (_v735.data,) = _get_struct_f().unpack(str[start:end])
        _v736 = _v724.size
        _v737 = _v736.x
        start = end
        end += 4
        (_v737.data,) = _get_struct_f().unpack(str[start:end])
        _v738 = _v736.y
        start = end
        end += 4
        (_v738.data,) = _get_struct_f().unpack(str[start:end])
        _v739 = _v736.z
        start = end
        end += 4
        (_v739.data,) = _get_struct_f().unpack(str[start:end])
        _v740 = _v724.size_cov
        _v741 = _v740.x
        start = end
        end += 4
        (_v741.data,) = _get_struct_f().unpack(str[start:end])
        _v742 = _v740.y
        start = end
        end += 4
        (_v742.data,) = _get_struct_f().unpack(str[start:end])
        _v743 = _v740.z
        start = end
        end += 4
        (_v743.data,) = _get_struct_f().unpack(str[start:end])
        _v744 = _v724.direction
        _v745 = _v744.x
        start = end
        end += 4
        (_v745.data,) = _get_struct_f().unpack(str[start:end])
        _v746 = _v744.y
        start = end
        end += 4
        (_v746.data,) = _get_struct_f().unpack(str[start:end])
        _v747 = _v744.z
        start = end
        end += 4
        (_v747.data,) = _get_struct_f().unpack(str[start:end])
        _v748 = _v724.direction_cov
        _v749 = _v748.x
        start = end
        end += 4
        (_v749.data,) = _get_struct_f().unpack(str[start:end])
        _v750 = _v748.y
        start = end
        end += 4
        (_v750.data,) = _get_struct_f().unpack(str[start:end])
        _v751 = _v748.z
        start = end
        end += 4
        (_v751.data,) = _get_struct_f().unpack(str[start:end])
        _v752 = _v724.type
        start = end
        end += 4
        (_v752.data,) = _get_struct_i().unpack(str[start:end])
        _v753 = _v724.type_confidence
        start = end
        end += 4
        (_v753.data,) = _get_struct_f().unpack(str[start:end])
        _v754 = _v724.attention_type
        start = end
        end += 4
        (_v754.data,) = _get_struct_i().unpack(str[start:end])
        _v755 = _v724.motion_state
        start = end
        end += 4
        (_v755.data,) = _get_struct_i().unpack(str[start:end])
        _v756 = _v724.lane_pos
        start = end
        end += 4
        (_v756.data,) = _get_struct_i().unpack(str[start:end])
        _v757 = _v724.trakcer_id
        start = end
        end += 4
        (_v757.data,) = _get_struct_i().unpack(str[start:end])
        _v758 = _v724.age
        start = end
        end += 8
        (_v758.data,) = _get_struct_d().unpack(str[start:end])
        _v759 = _v724.velocity
        _v760 = _v759.x
        start = end
        end += 4
        (_v760.data,) = _get_struct_f().unpack(str[start:end])
        _v761 = _v759.y
        start = end
        end += 4
        (_v761.data,) = _get_struct_f().unpack(str[start:end])
        _v762 = _v759.z
        start = end
        end += 4
        (_v762.data,) = _get_struct_f().unpack(str[start:end])
        _v763 = _v724.velocity_cov
        _v764 = _v763.x
        start = end
        end += 4
        (_v764.data,) = _get_struct_f().unpack(str[start:end])
        _v765 = _v763.y
        start = end
        end += 4
        (_v765.data,) = _get_struct_f().unpack(str[start:end])
        _v766 = _v763.z
        start = end
        end += 4
        (_v766.data,) = _get_struct_f().unpack(str[start:end])
        _v767 = _v724.acceleration
        _v768 = _v767.x
        start = end
        end += 4
        (_v768.data,) = _get_struct_f().unpack(str[start:end])
        _v769 = _v767.y
        start = end
        end += 4
        (_v769.data,) = _get_struct_f().unpack(str[start:end])
        _v770 = _v767.z
        start = end
        end += 4
        (_v770.data,) = _get_struct_f().unpack(str[start:end])
        _v771 = _v724.acceleration_cov
        _v772 = _v771.x
        start = end
        end += 4
        (_v772.data,) = _get_struct_f().unpack(str[start:end])
        _v773 = _v771.y
        start = end
        end += 4
        (_v773.data,) = _get_struct_f().unpack(str[start:end])
        _v774 = _v771.z
        start = end
        end += 4
        (_v774.data,) = _get_struct_f().unpack(str[start:end])
        _v775 = _v724.angle_velocity
        start = end
        end += 4
        (_v775.data,) = _get_struct_f().unpack(str[start:end])
        _v776 = _v724.angle_velocity_cov
        start = end
        end += 4
        (_v776.data,) = _get_struct_f().unpack(str[start:end])
        _v777 = _v724.angle_acceleration
        start = end
        end += 4
        (_v777.data,) = _get_struct_f().unpack(str[start:end])
        _v778 = _v724.angle_acceleration_cov
        start = end
        end += 4
        (_v778.data,) = _get_struct_f().unpack(str[start:end])
        _v779 = _v724.anchor
        _v780 = _v779.x
        start = end
        end += 4
        (_v780.data,) = _get_struct_f().unpack(str[start:end])
        _v781 = _v779.y
        start = end
        end += 4
        (_v781.data,) = _get_struct_f().unpack(str[start:end])
        _v782 = _v779.z
        start = end
        end += 4
        (_v782.data,) = _get_struct_f().unpack(str[start:end])
        _v783 = _v724.nearest_point
        _v784 = _v783.x
        start = end
        end += 4
        (_v784.data,) = _get_struct_f().unpack(str[start:end])
        _v785 = _v783.y
        start = end
        end += 4
        (_v785.data,) = _get_struct_f().unpack(str[start:end])
        _v786 = _v783.z
        start = end
        end += 4
        (_v786.data,) = _get_struct_f().unpack(str[start:end])
        _v787 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v787.data,) = _get_struct_B().unpack(str[start:end])
        _v787.data = bool(_v787.data)
        _v788 = val1.supplementinfo
        _v789 = _v788.unique_id
        start = end
        end += 4
        (_v789.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v790 = val3.x
          start = end
          end += 4
          (_v790.data,) = _get_struct_f().unpack(str[start:end])
          _v791 = val3.y
          start = end
          end += 4
          (_v791.data,) = _get_struct_f().unpack(str[start:end])
          _v792 = val3.z
          start = end
          end += 4
          (_v792.data,) = _get_struct_f().unpack(str[start:end])
          _v788.polygon.append(val3)
        _v793 = _v788.left_point_index
        start = end
        end += 4
        (_v793.data,) = _get_struct_i().unpack(str[start:end])
        _v794 = _v788.right_point_index
        start = end
        end += 4
        (_v794.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v788.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v788.latent_types.append(val3)
        _v795 = _v788.size_type
        start = end
        end += 4
        (_v795.data,) = _get_struct_i().unpack(str[start:end])
        _v796 = _v788.mode
        start = end
        end += 4
        (_v796.data,) = _get_struct_i().unpack(str[start:end])
        _v797 = _v788.in_roi
        start = end
        end += 1
        (_v797.data,) = _get_struct_B().unpack(str[start:end])
        _v797.data = bool(_v797.data)
        _v798 = _v788.tracking_state
        start = end
        end += 4
        (_v798.data,) = _get_struct_i().unpack(str[start:end])
        _v799 = _v788.geo_center
        _v800 = _v799.x
        start = end
        end += 4
        (_v800.data,) = _get_struct_f().unpack(str[start:end])
        _v801 = _v799.y
        start = end
        end += 4
        (_v801.data,) = _get_struct_f().unpack(str[start:end])
        _v802 = _v799.z
        start = end
        end += 4
        (_v802.data,) = _get_struct_f().unpack(str[start:end])
        _v803 = _v788.geo_size
        _v804 = _v803.x
        start = end
        end += 4
        (_v804.data,) = _get_struct_f().unpack(str[start:end])
        _v805 = _v803.y
        start = end
        end += 4
        (_v805.data,) = _get_struct_f().unpack(str[start:end])
        _v806 = _v803.z
        start = end
        end += 4
        (_v806.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v807 = val3.x
          start = end
          end += 4
          (_v807.data,) = _get_struct_f().unpack(str[start:end])
          _v808 = val3.y
          start = end
          end += 4
          (_v808.data,) = _get_struct_f().unpack(str[start:end])
          _v809 = val3.z
          start = end
          end += 4
          (_v809.data,) = _get_struct_f().unpack(str[start:end])
          _v788.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v810 = val3.x
          start = end
          end += 4
          (_v810.data,) = _get_struct_f().unpack(str[start:end])
          _v811 = val3.y
          start = end
          end += 4
          (_v811.data,) = _get_struct_f().unpack(str[start:end])
          _v812 = val3.z
          start = end
          end += 4
          (_v812.data,) = _get_struct_f().unpack(str[start:end])
          _v788.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v788.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v788.history_type.append(val3)
        _v813 = _v788.gps_mode
        start = end
        end += 4
        (_v813.data,) = _get_struct_i().unpack(str[start:end])
        _v814 = _v788.gps_info
        _v815 = _v814.x
        start = end
        end += 8
        (_v815.data,) = _get_struct_d().unpack(str[start:end])
        _v816 = _v814.y
        start = end
        end += 8
        (_v816.data,) = _get_struct_d().unpack(str[start:end])
        _v817 = _v814.z
        start = end
        end += 8
        (_v817.data,) = _get_struct_d().unpack(str[start:end])
        self.lidarframe.objects.objects.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_pointcloud.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_pointcloud.data = bool(self.lidarframe.has_pointcloud.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.scan_pointcloud = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point4f()
        _v818 = val1.x
        start = end
        end += 4
        (_v818.data,) = _get_struct_f().unpack(str[start:end])
        _v819 = val1.y
        start = end
        end += 4
        (_v819.data,) = _get_struct_f().unpack(str[start:end])
        _v820 = val1.z
        start = end
        end += 4
        (_v820.data,) = _get_struct_f().unpack(str[start:end])
        _v821 = val1.i
        start = end
        end += 4
        (_v821.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.scan_pointcloud.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_attention_objects.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_attention_objects.data = bool(self.lidarframe.has_attention_objects.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.attention_objects.objects = []
      for i in range(0, length):
        val1 = all_msgs.msg.Object()
        _v822 = val1.coreinfo
        _v823 = _v822.timestamp
        start = end
        end += 8
        (_v823.data,) = _get_struct_d().unpack(str[start:end])
        _v824 = _v822.priority_id
        start = end
        end += 4
        (_v824.data,) = _get_struct_i().unpack(str[start:end])
        _v825 = _v822.exist_confidence
        start = end
        end += 4
        (_v825.data,) = _get_struct_f().unpack(str[start:end])
        _v826 = _v822.center
        _v827 = _v826.x
        start = end
        end += 4
        (_v827.data,) = _get_struct_f().unpack(str[start:end])
        _v828 = _v826.y
        start = end
        end += 4
        (_v828.data,) = _get_struct_f().unpack(str[start:end])
        _v829 = _v826.z
        start = end
        end += 4
        (_v829.data,) = _get_struct_f().unpack(str[start:end])
        _v830 = _v822.center_cov
        _v831 = _v830.x
        start = end
        end += 4
        (_v831.data,) = _get_struct_f().unpack(str[start:end])
        _v832 = _v830.y
        start = end
        end += 4
        (_v832.data,) = _get_struct_f().unpack(str[start:end])
        _v833 = _v830.z
        start = end
        end += 4
        (_v833.data,) = _get_struct_f().unpack(str[start:end])
        _v834 = _v822.size
        _v835 = _v834.x
        start = end
        end += 4
        (_v835.data,) = _get_struct_f().unpack(str[start:end])
        _v836 = _v834.y
        start = end
        end += 4
        (_v836.data,) = _get_struct_f().unpack(str[start:end])
        _v837 = _v834.z
        start = end
        end += 4
        (_v837.data,) = _get_struct_f().unpack(str[start:end])
        _v838 = _v822.size_cov
        _v839 = _v838.x
        start = end
        end += 4
        (_v839.data,) = _get_struct_f().unpack(str[start:end])
        _v840 = _v838.y
        start = end
        end += 4
        (_v840.data,) = _get_struct_f().unpack(str[start:end])
        _v841 = _v838.z
        start = end
        end += 4
        (_v841.data,) = _get_struct_f().unpack(str[start:end])
        _v842 = _v822.direction
        _v843 = _v842.x
        start = end
        end += 4
        (_v843.data,) = _get_struct_f().unpack(str[start:end])
        _v844 = _v842.y
        start = end
        end += 4
        (_v844.data,) = _get_struct_f().unpack(str[start:end])
        _v845 = _v842.z
        start = end
        end += 4
        (_v845.data,) = _get_struct_f().unpack(str[start:end])
        _v846 = _v822.direction_cov
        _v847 = _v846.x
        start = end
        end += 4
        (_v847.data,) = _get_struct_f().unpack(str[start:end])
        _v848 = _v846.y
        start = end
        end += 4
        (_v848.data,) = _get_struct_f().unpack(str[start:end])
        _v849 = _v846.z
        start = end
        end += 4
        (_v849.data,) = _get_struct_f().unpack(str[start:end])
        _v850 = _v822.type
        start = end
        end += 4
        (_v850.data,) = _get_struct_i().unpack(str[start:end])
        _v851 = _v822.type_confidence
        start = end
        end += 4
        (_v851.data,) = _get_struct_f().unpack(str[start:end])
        _v852 = _v822.attention_type
        start = end
        end += 4
        (_v852.data,) = _get_struct_i().unpack(str[start:end])
        _v853 = _v822.motion_state
        start = end
        end += 4
        (_v853.data,) = _get_struct_i().unpack(str[start:end])
        _v854 = _v822.lane_pos
        start = end
        end += 4
        (_v854.data,) = _get_struct_i().unpack(str[start:end])
        _v855 = _v822.trakcer_id
        start = end
        end += 4
        (_v855.data,) = _get_struct_i().unpack(str[start:end])
        _v856 = _v822.age
        start = end
        end += 8
        (_v856.data,) = _get_struct_d().unpack(str[start:end])
        _v857 = _v822.velocity
        _v858 = _v857.x
        start = end
        end += 4
        (_v858.data,) = _get_struct_f().unpack(str[start:end])
        _v859 = _v857.y
        start = end
        end += 4
        (_v859.data,) = _get_struct_f().unpack(str[start:end])
        _v860 = _v857.z
        start = end
        end += 4
        (_v860.data,) = _get_struct_f().unpack(str[start:end])
        _v861 = _v822.velocity_cov
        _v862 = _v861.x
        start = end
        end += 4
        (_v862.data,) = _get_struct_f().unpack(str[start:end])
        _v863 = _v861.y
        start = end
        end += 4
        (_v863.data,) = _get_struct_f().unpack(str[start:end])
        _v864 = _v861.z
        start = end
        end += 4
        (_v864.data,) = _get_struct_f().unpack(str[start:end])
        _v865 = _v822.acceleration
        _v866 = _v865.x
        start = end
        end += 4
        (_v866.data,) = _get_struct_f().unpack(str[start:end])
        _v867 = _v865.y
        start = end
        end += 4
        (_v867.data,) = _get_struct_f().unpack(str[start:end])
        _v868 = _v865.z
        start = end
        end += 4
        (_v868.data,) = _get_struct_f().unpack(str[start:end])
        _v869 = _v822.acceleration_cov
        _v870 = _v869.x
        start = end
        end += 4
        (_v870.data,) = _get_struct_f().unpack(str[start:end])
        _v871 = _v869.y
        start = end
        end += 4
        (_v871.data,) = _get_struct_f().unpack(str[start:end])
        _v872 = _v869.z
        start = end
        end += 4
        (_v872.data,) = _get_struct_f().unpack(str[start:end])
        _v873 = _v822.angle_velocity
        start = end
        end += 4
        (_v873.data,) = _get_struct_f().unpack(str[start:end])
        _v874 = _v822.angle_velocity_cov
        start = end
        end += 4
        (_v874.data,) = _get_struct_f().unpack(str[start:end])
        _v875 = _v822.angle_acceleration
        start = end
        end += 4
        (_v875.data,) = _get_struct_f().unpack(str[start:end])
        _v876 = _v822.angle_acceleration_cov
        start = end
        end += 4
        (_v876.data,) = _get_struct_f().unpack(str[start:end])
        _v877 = _v822.anchor
        _v878 = _v877.x
        start = end
        end += 4
        (_v878.data,) = _get_struct_f().unpack(str[start:end])
        _v879 = _v877.y
        start = end
        end += 4
        (_v879.data,) = _get_struct_f().unpack(str[start:end])
        _v880 = _v877.z
        start = end
        end += 4
        (_v880.data,) = _get_struct_f().unpack(str[start:end])
        _v881 = _v822.nearest_point
        _v882 = _v881.x
        start = end
        end += 4
        (_v882.data,) = _get_struct_f().unpack(str[start:end])
        _v883 = _v881.y
        start = end
        end += 4
        (_v883.data,) = _get_struct_f().unpack(str[start:end])
        _v884 = _v881.z
        start = end
        end += 4
        (_v884.data,) = _get_struct_f().unpack(str[start:end])
        _v885 = val1.hassupplmentinfo
        start = end
        end += 1
        (_v885.data,) = _get_struct_B().unpack(str[start:end])
        _v885.data = bool(_v885.data)
        _v886 = val1.supplementinfo
        _v887 = _v886.unique_id
        start = end
        end += 4
        (_v887.data,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.polygon = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v888 = val3.x
          start = end
          end += 4
          (_v888.data,) = _get_struct_f().unpack(str[start:end])
          _v889 = val3.y
          start = end
          end += 4
          (_v889.data,) = _get_struct_f().unpack(str[start:end])
          _v890 = val3.z
          start = end
          end += 4
          (_v890.data,) = _get_struct_f().unpack(str[start:end])
          _v886.polygon.append(val3)
        _v891 = _v886.left_point_index
        start = end
        end += 4
        (_v891.data,) = _get_struct_i().unpack(str[start:end])
        _v892 = _v886.right_point_index
        start = end
        end += 4
        (_v892.data,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.cloud_indices = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v886.cloud_indices.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.latent_types = []
        for i in range(0, length):
          val3 = std_msgs.msg.Float32()
          start = end
          end += 4
          (val3.data,) = _get_struct_f().unpack(str[start:end])
          _v886.latent_types.append(val3)
        _v893 = _v886.size_type
        start = end
        end += 4
        (_v893.data,) = _get_struct_i().unpack(str[start:end])
        _v894 = _v886.mode
        start = end
        end += 4
        (_v894.data,) = _get_struct_i().unpack(str[start:end])
        _v895 = _v886.in_roi
        start = end
        end += 1
        (_v895.data,) = _get_struct_B().unpack(str[start:end])
        _v895.data = bool(_v895.data)
        _v896 = _v886.tracking_state
        start = end
        end += 4
        (_v896.data,) = _get_struct_i().unpack(str[start:end])
        _v897 = _v886.geo_center
        _v898 = _v897.x
        start = end
        end += 4
        (_v898.data,) = _get_struct_f().unpack(str[start:end])
        _v899 = _v897.y
        start = end
        end += 4
        (_v899.data,) = _get_struct_f().unpack(str[start:end])
        _v900 = _v897.z
        start = end
        end += 4
        (_v900.data,) = _get_struct_f().unpack(str[start:end])
        _v901 = _v886.geo_size
        _v902 = _v901.x
        start = end
        end += 4
        (_v902.data,) = _get_struct_f().unpack(str[start:end])
        _v903 = _v901.y
        start = end
        end += 4
        (_v903.data,) = _get_struct_f().unpack(str[start:end])
        _v904 = _v901.z
        start = end
        end += 4
        (_v904.data,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.trajectory = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v905 = val3.x
          start = end
          end += 4
          (_v905.data,) = _get_struct_f().unpack(str[start:end])
          _v906 = val3.y
          start = end
          end += 4
          (_v906.data,) = _get_struct_f().unpack(str[start:end])
          _v907 = val3.z
          start = end
          end += 4
          (_v907.data,) = _get_struct_f().unpack(str[start:end])
          _v886.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.history_velocity = []
        for i in range(0, length):
          val3 = all_msgs.msg.Point3f()
          _v908 = val3.x
          start = end
          end += 4
          (_v908.data,) = _get_struct_f().unpack(str[start:end])
          _v909 = val3.y
          start = end
          end += 4
          (_v909.data,) = _get_struct_f().unpack(str[start:end])
          _v910 = val3.z
          start = end
          end += 4
          (_v910.data,) = _get_struct_f().unpack(str[start:end])
          _v886.history_velocity.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v886.history_type = []
        for i in range(0, length):
          val3 = std_msgs.msg.Int32()
          start = end
          end += 4
          (val3.data,) = _get_struct_i().unpack(str[start:end])
          _v886.history_type.append(val3)
        _v911 = _v886.gps_mode
        start = end
        end += 4
        (_v911.data,) = _get_struct_i().unpack(str[start:end])
        _v912 = _v886.gps_info
        _v913 = _v912.x
        start = end
        end += 8
        (_v913.data,) = _get_struct_d().unpack(str[start:end])
        _v914 = _v912.y
        start = end
        end += 8
        (_v914.data,) = _get_struct_d().unpack(str[start:end])
        _v915 = _v912.z
        start = end
        end += 8
        (_v915.data,) = _get_struct_d().unpack(str[start:end])
        self.lidarframe.attention_objects.objects.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_freespace.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_freespace.data = bool(self.lidarframe.has_freespace.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.freespace_infos.fs_pts = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v916 = val1.x
        start = end
        end += 4
        (_v916.data,) = _get_struct_f().unpack(str[start:end])
        _v917 = val1.y
        start = end
        end += 4
        (_v917.data,) = _get_struct_f().unpack(str[start:end])
        _v918 = val1.z
        start = end
        end += 4
        (_v918.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.freespace_infos.fs_pts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.freespace_infos.fs_confidence = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.freespace_infos.fs_confidence.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_lanes.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_lanes.data = bool(self.lidarframe.has_lanes.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.lanes.lanes = []
      for i in range(0, length):
        val1 = all_msgs.msg.Lane()
        _v919 = val1.lane_id
        start = end
        end += 4
        (_v919.data,) = _get_struct_i().unpack(str[start:end])
        _v920 = val1.curve
        _v921 = _v920.x_start
        start = end
        end += 4
        (_v921.data,) = _get_struct_f().unpack(str[start:end])
        _v922 = _v920.x_end
        start = end
        end += 4
        (_v922.data,) = _get_struct_f().unpack(str[start:end])
        _v923 = _v920.a
        start = end
        end += 4
        (_v923.data,) = _get_struct_f().unpack(str[start:end])
        _v924 = _v920.b
        start = end
        end += 4
        (_v924.data,) = _get_struct_f().unpack(str[start:end])
        _v925 = _v920.c
        start = end
        end += 4
        (_v925.data,) = _get_struct_f().unpack(str[start:end])
        _v926 = _v920.d
        start = end
        end += 4
        (_v926.data,) = _get_struct_f().unpack(str[start:end])
        _v927 = val1.end_points
        _v928 = _v927.start
        _v929 = _v928.x
        start = end
        end += 4
        (_v929.data,) = _get_struct_f().unpack(str[start:end])
        _v930 = _v928.y
        start = end
        end += 4
        (_v930.data,) = _get_struct_f().unpack(str[start:end])
        _v931 = _v927.end
        _v932 = _v931.x
        start = end
        end += 4
        (_v932.data,) = _get_struct_f().unpack(str[start:end])
        _v933 = _v931.y
        start = end
        end += 4
        (_v933.data,) = _get_struct_f().unpack(str[start:end])
        _v934 = val1.measure_status
        start = end
        end += 4
        (_v934.data,) = _get_struct_i().unpack(str[start:end])
        _v935 = val1.confidence
        start = end
        end += 4
        (_v935.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.lanes.lanes.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_roadedges.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_roadedges.data = bool(self.lidarframe.has_roadedges.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.roadedges.curbs = []
      for i in range(0, length):
        val1 = all_msgs.msg.RoadEdge()
        _v936 = val1.roadedge_id
        start = end
        end += 4
        (_v936.data,) = _get_struct_i().unpack(str[start:end])
        _v937 = val1.curve
        _v938 = _v937.x_start
        start = end
        end += 4
        (_v938.data,) = _get_struct_f().unpack(str[start:end])
        _v939 = _v937.x_end
        start = end
        end += 4
        (_v939.data,) = _get_struct_f().unpack(str[start:end])
        _v940 = _v937.a
        start = end
        end += 4
        (_v940.data,) = _get_struct_f().unpack(str[start:end])
        _v941 = _v937.b
        start = end
        end += 4
        (_v941.data,) = _get_struct_f().unpack(str[start:end])
        _v942 = _v937.c
        start = end
        end += 4
        (_v942.data,) = _get_struct_f().unpack(str[start:end])
        _v943 = _v937.d
        start = end
        end += 4
        (_v943.data,) = _get_struct_f().unpack(str[start:end])
        _v944 = val1.end_points
        _v945 = _v944.start
        _v946 = _v945.x
        start = end
        end += 4
        (_v946.data,) = _get_struct_f().unpack(str[start:end])
        _v947 = _v945.y
        start = end
        end += 4
        (_v947.data,) = _get_struct_f().unpack(str[start:end])
        _v948 = _v944.end
        _v949 = _v948.x
        start = end
        end += 4
        (_v949.data,) = _get_struct_f().unpack(str[start:end])
        _v950 = _v948.y
        start = end
        end += 4
        (_v950.data,) = _get_struct_f().unpack(str[start:end])
        _v951 = val1.measure_status
        start = end
        end += 4
        (_v951.data,) = _get_struct_i().unpack(str[start:end])
        _v952 = val1.confidence
        start = end
        end += 4
        (_v952.data,) = _get_struct_f().unpack(str[start:end])
        self.lidarframe.roadedges.curbs.append(val1)
      start = end
      end += 1
      (self.lidarframe.has_sematice_indices.data,) = _get_struct_B().unpack(str[start:end])
      self.lidarframe.has_sematice_indices.data = bool(self.lidarframe.has_sematice_indices.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.non_ground_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.non_ground_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.ground_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.ground_indices.indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lidarframe.background_indices.indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.lidarframe.background_indices.indices.append(val1)
      start = end
      end += 4
      (self.device_id.data,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d6fi3d = None
def _get_struct_d6fi3d():
    global _struct_d6fi3d
    if _struct_d6fi3d is None:
        _struct_d6fi3d = struct.Struct("<d6fi3d")
    return _struct_d6fi3d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
