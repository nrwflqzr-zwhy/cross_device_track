# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/Object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class Object(genpy.Message):
  _md5sum = "58769107fb9619969bdc416c42341c77"
  _type = "all_msgs/Object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """CoreInfo coreinfo
std_msgs/Bool  hassupplmentinfo 
SupplementInfo supplementinfo 

================================================================================
MSG: all_msgs/CoreInfo
std_msgs/Float64 timestamp

std_msgs/Int32 priority_id
std_msgs/Float32 exist_confidence 
Point3f          center 
Point3f          center_cov 
Point3f          size 
Point3f          size_cov 
Point3f          direction 
Point3f          direction_cov         
std_msgs/Int32   type 
std_msgs/Float32 type_confidence 
std_msgs/Int32   attention_type 
std_msgs/Int32   motion_state
std_msgs/Int32   lane_pos
std_msgs/Int32   trakcer_id 
std_msgs/Float64 age 
Point3f          velocity 
Point3f          velocity_cov 
Point3f          acceleration 
Point3f          acceleration_cov 
std_msgs/Float32 angle_velocity 
std_msgs/Float32 angle_velocity_cov 
std_msgs/Float32 angle_acceleration 
std_msgs/Float32 angle_acceleration_cov  
Point3f          anchor 
Point3f          nearest_point 


================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 
================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: all_msgs/SupplementInfo
std_msgs/UInt32     unique_id

Point3f[]           polygon
std_msgs/Int32      left_point_index 
std_msgs/Int32      right_point_index 

std_msgs/Int32[]    cloud_indices

std_msgs/Float32[]  latent_types
std_msgs/Int32      size_type 
std_msgs/Int32      mode 
std_msgs/Bool       in_roi 
std_msgs/Int32      tracking_state
Point3f             geo_center 
Point3f             geo_size 



Point3f[]           trajectory 
Point3f[]           history_velocity
std_msgs/Int32[]    history_type 
std_msgs/Int32      gps_mode 
Point3d             gps_info 

================================================================================
MSG: std_msgs/UInt32
uint32 data
================================================================================
MSG: all_msgs/Point3d
std_msgs/Float64 x 
std_msgs/Float64 y 
std_msgs/Float64 z 
"""
  __slots__ = ['coreinfo','hassupplmentinfo','supplementinfo']
  _slot_types = ['all_msgs/CoreInfo','std_msgs/Bool','all_msgs/SupplementInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       coreinfo,hassupplmentinfo,supplementinfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.coreinfo is None:
        self.coreinfo = all_msgs.msg.CoreInfo()
      if self.hassupplmentinfo is None:
        self.hassupplmentinfo = std_msgs.msg.Bool()
      if self.supplementinfo is None:
        self.supplementinfo = all_msgs.msg.SupplementInfo()
    else:
      self.coreinfo = all_msgs.msg.CoreInfo()
      self.hassupplmentinfo = std_msgs.msg.Bool()
      self.supplementinfo = all_msgs.msg.SupplementInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di19fif4id22fBI().pack(_x.coreinfo.timestamp.data, _x.coreinfo.priority_id.data, _x.coreinfo.exist_confidence.data, _x.coreinfo.center.x.data, _x.coreinfo.center.y.data, _x.coreinfo.center.z.data, _x.coreinfo.center_cov.x.data, _x.coreinfo.center_cov.y.data, _x.coreinfo.center_cov.z.data, _x.coreinfo.size.x.data, _x.coreinfo.size.y.data, _x.coreinfo.size.z.data, _x.coreinfo.size_cov.x.data, _x.coreinfo.size_cov.y.data, _x.coreinfo.size_cov.z.data, _x.coreinfo.direction.x.data, _x.coreinfo.direction.y.data, _x.coreinfo.direction.z.data, _x.coreinfo.direction_cov.x.data, _x.coreinfo.direction_cov.y.data, _x.coreinfo.direction_cov.z.data, _x.coreinfo.type.data, _x.coreinfo.type_confidence.data, _x.coreinfo.attention_type.data, _x.coreinfo.motion_state.data, _x.coreinfo.lane_pos.data, _x.coreinfo.trakcer_id.data, _x.coreinfo.age.data, _x.coreinfo.velocity.x.data, _x.coreinfo.velocity.y.data, _x.coreinfo.velocity.z.data, _x.coreinfo.velocity_cov.x.data, _x.coreinfo.velocity_cov.y.data, _x.coreinfo.velocity_cov.z.data, _x.coreinfo.acceleration.x.data, _x.coreinfo.acceleration.y.data, _x.coreinfo.acceleration.z.data, _x.coreinfo.acceleration_cov.x.data, _x.coreinfo.acceleration_cov.y.data, _x.coreinfo.acceleration_cov.z.data, _x.coreinfo.angle_velocity.data, _x.coreinfo.angle_velocity_cov.data, _x.coreinfo.angle_acceleration.data, _x.coreinfo.angle_acceleration_cov.data, _x.coreinfo.anchor.x.data, _x.coreinfo.anchor.y.data, _x.coreinfo.anchor.z.data, _x.coreinfo.nearest_point.x.data, _x.coreinfo.nearest_point.y.data, _x.coreinfo.nearest_point.z.data, _x.hassupplmentinfo.data, _x.supplementinfo.unique_id.data))
      length = len(self.supplementinfo.polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.polygon:
        _v1 = val1.x
        _x = _v1.data
        buff.write(_get_struct_f().pack(_x))
        _v2 = val1.y
        _x = _v2.data
        buff.write(_get_struct_f().pack(_x))
        _v3 = val1.z
        _x = _v3.data
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.supplementinfo.left_point_index.data, _x.supplementinfo.right_point_index.data))
      length = len(self.supplementinfo.cloud_indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.cloud_indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.supplementinfo.latent_types)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.latent_types:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_2iBi6f().pack(_x.supplementinfo.size_type.data, _x.supplementinfo.mode.data, _x.supplementinfo.in_roi.data, _x.supplementinfo.tracking_state.data, _x.supplementinfo.geo_center.x.data, _x.supplementinfo.geo_center.y.data, _x.supplementinfo.geo_center.z.data, _x.supplementinfo.geo_size.x.data, _x.supplementinfo.geo_size.y.data, _x.supplementinfo.geo_size.z.data))
      length = len(self.supplementinfo.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.trajectory:
        _v4 = val1.x
        _x = _v4.data
        buff.write(_get_struct_f().pack(_x))
        _v5 = val1.y
        _x = _v5.data
        buff.write(_get_struct_f().pack(_x))
        _v6 = val1.z
        _x = _v6.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.supplementinfo.history_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.history_velocity:
        _v7 = val1.x
        _x = _v7.data
        buff.write(_get_struct_f().pack(_x))
        _v8 = val1.y
        _x = _v8.data
        buff.write(_get_struct_f().pack(_x))
        _v9 = val1.z
        _x = _v9.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.supplementinfo.history_type)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.history_type:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.supplementinfo.gps_mode.data, _x.supplementinfo.gps_info.x.data, _x.supplementinfo.gps_info.y.data, _x.supplementinfo.gps_info.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coreinfo is None:
        self.coreinfo = all_msgs.msg.CoreInfo()
      if self.hassupplmentinfo is None:
        self.hassupplmentinfo = std_msgs.msg.Bool()
      if self.supplementinfo is None:
        self.supplementinfo = all_msgs.msg.SupplementInfo()
      end = 0
      _x = self
      start = end
      end += 213
      (_x.coreinfo.timestamp.data, _x.coreinfo.priority_id.data, _x.coreinfo.exist_confidence.data, _x.coreinfo.center.x.data, _x.coreinfo.center.y.data, _x.coreinfo.center.z.data, _x.coreinfo.center_cov.x.data, _x.coreinfo.center_cov.y.data, _x.coreinfo.center_cov.z.data, _x.coreinfo.size.x.data, _x.coreinfo.size.y.data, _x.coreinfo.size.z.data, _x.coreinfo.size_cov.x.data, _x.coreinfo.size_cov.y.data, _x.coreinfo.size_cov.z.data, _x.coreinfo.direction.x.data, _x.coreinfo.direction.y.data, _x.coreinfo.direction.z.data, _x.coreinfo.direction_cov.x.data, _x.coreinfo.direction_cov.y.data, _x.coreinfo.direction_cov.z.data, _x.coreinfo.type.data, _x.coreinfo.type_confidence.data, _x.coreinfo.attention_type.data, _x.coreinfo.motion_state.data, _x.coreinfo.lane_pos.data, _x.coreinfo.trakcer_id.data, _x.coreinfo.age.data, _x.coreinfo.velocity.x.data, _x.coreinfo.velocity.y.data, _x.coreinfo.velocity.z.data, _x.coreinfo.velocity_cov.x.data, _x.coreinfo.velocity_cov.y.data, _x.coreinfo.velocity_cov.z.data, _x.coreinfo.acceleration.x.data, _x.coreinfo.acceleration.y.data, _x.coreinfo.acceleration.z.data, _x.coreinfo.acceleration_cov.x.data, _x.coreinfo.acceleration_cov.y.data, _x.coreinfo.acceleration_cov.z.data, _x.coreinfo.angle_velocity.data, _x.coreinfo.angle_velocity_cov.data, _x.coreinfo.angle_acceleration.data, _x.coreinfo.angle_acceleration_cov.data, _x.coreinfo.anchor.x.data, _x.coreinfo.anchor.y.data, _x.coreinfo.anchor.z.data, _x.coreinfo.nearest_point.x.data, _x.coreinfo.nearest_point.y.data, _x.coreinfo.nearest_point.z.data, _x.hassupplmentinfo.data, _x.supplementinfo.unique_id.data,) = _get_struct_di19fif4id22fBI().unpack(str[start:end])
      self.hassupplmentinfo.data = bool(self.hassupplmentinfo.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.polygon = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v10 = val1.x
        start = end
        end += 4
        (_v10.data,) = _get_struct_f().unpack(str[start:end])
        _v11 = val1.y
        start = end
        end += 4
        (_v11.data,) = _get_struct_f().unpack(str[start:end])
        _v12 = val1.z
        start = end
        end += 4
        (_v12.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.polygon.append(val1)
      _x = self
      start = end
      end += 8
      (_x.supplementinfo.left_point_index.data, _x.supplementinfo.right_point_index.data,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.cloud_indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.supplementinfo.cloud_indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.latent_types = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.latent_types.append(val1)
      _x = self
      start = end
      end += 37
      (_x.supplementinfo.size_type.data, _x.supplementinfo.mode.data, _x.supplementinfo.in_roi.data, _x.supplementinfo.tracking_state.data, _x.supplementinfo.geo_center.x.data, _x.supplementinfo.geo_center.y.data, _x.supplementinfo.geo_center.z.data, _x.supplementinfo.geo_size.x.data, _x.supplementinfo.geo_size.y.data, _x.supplementinfo.geo_size.z.data,) = _get_struct_2iBi6f().unpack(str[start:end])
      self.supplementinfo.in_roi.data = bool(self.supplementinfo.in_roi.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.trajectory = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v13 = val1.x
        start = end
        end += 4
        (_v13.data,) = _get_struct_f().unpack(str[start:end])
        _v14 = val1.y
        start = end
        end += 4
        (_v14.data,) = _get_struct_f().unpack(str[start:end])
        _v15 = val1.z
        start = end
        end += 4
        (_v15.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.history_velocity = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v16 = val1.x
        start = end
        end += 4
        (_v16.data,) = _get_struct_f().unpack(str[start:end])
        _v17 = val1.y
        start = end
        end += 4
        (_v17.data,) = _get_struct_f().unpack(str[start:end])
        _v18 = val1.z
        start = end
        end += 4
        (_v18.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.history_velocity.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.history_type = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.supplementinfo.history_type.append(val1)
      _x = self
      start = end
      end += 28
      (_x.supplementinfo.gps_mode.data, _x.supplementinfo.gps_info.x.data, _x.supplementinfo.gps_info.y.data, _x.supplementinfo.gps_info.z.data,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di19fif4id22fBI().pack(_x.coreinfo.timestamp.data, _x.coreinfo.priority_id.data, _x.coreinfo.exist_confidence.data, _x.coreinfo.center.x.data, _x.coreinfo.center.y.data, _x.coreinfo.center.z.data, _x.coreinfo.center_cov.x.data, _x.coreinfo.center_cov.y.data, _x.coreinfo.center_cov.z.data, _x.coreinfo.size.x.data, _x.coreinfo.size.y.data, _x.coreinfo.size.z.data, _x.coreinfo.size_cov.x.data, _x.coreinfo.size_cov.y.data, _x.coreinfo.size_cov.z.data, _x.coreinfo.direction.x.data, _x.coreinfo.direction.y.data, _x.coreinfo.direction.z.data, _x.coreinfo.direction_cov.x.data, _x.coreinfo.direction_cov.y.data, _x.coreinfo.direction_cov.z.data, _x.coreinfo.type.data, _x.coreinfo.type_confidence.data, _x.coreinfo.attention_type.data, _x.coreinfo.motion_state.data, _x.coreinfo.lane_pos.data, _x.coreinfo.trakcer_id.data, _x.coreinfo.age.data, _x.coreinfo.velocity.x.data, _x.coreinfo.velocity.y.data, _x.coreinfo.velocity.z.data, _x.coreinfo.velocity_cov.x.data, _x.coreinfo.velocity_cov.y.data, _x.coreinfo.velocity_cov.z.data, _x.coreinfo.acceleration.x.data, _x.coreinfo.acceleration.y.data, _x.coreinfo.acceleration.z.data, _x.coreinfo.acceleration_cov.x.data, _x.coreinfo.acceleration_cov.y.data, _x.coreinfo.acceleration_cov.z.data, _x.coreinfo.angle_velocity.data, _x.coreinfo.angle_velocity_cov.data, _x.coreinfo.angle_acceleration.data, _x.coreinfo.angle_acceleration_cov.data, _x.coreinfo.anchor.x.data, _x.coreinfo.anchor.y.data, _x.coreinfo.anchor.z.data, _x.coreinfo.nearest_point.x.data, _x.coreinfo.nearest_point.y.data, _x.coreinfo.nearest_point.z.data, _x.hassupplmentinfo.data, _x.supplementinfo.unique_id.data))
      length = len(self.supplementinfo.polygon)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.polygon:
        _v19 = val1.x
        _x = _v19.data
        buff.write(_get_struct_f().pack(_x))
        _v20 = val1.y
        _x = _v20.data
        buff.write(_get_struct_f().pack(_x))
        _v21 = val1.z
        _x = _v21.data
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.supplementinfo.left_point_index.data, _x.supplementinfo.right_point_index.data))
      length = len(self.supplementinfo.cloud_indices)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.cloud_indices:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      length = len(self.supplementinfo.latent_types)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.latent_types:
        _x = val1.data
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_2iBi6f().pack(_x.supplementinfo.size_type.data, _x.supplementinfo.mode.data, _x.supplementinfo.in_roi.data, _x.supplementinfo.tracking_state.data, _x.supplementinfo.geo_center.x.data, _x.supplementinfo.geo_center.y.data, _x.supplementinfo.geo_center.z.data, _x.supplementinfo.geo_size.x.data, _x.supplementinfo.geo_size.y.data, _x.supplementinfo.geo_size.z.data))
      length = len(self.supplementinfo.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.trajectory:
        _v22 = val1.x
        _x = _v22.data
        buff.write(_get_struct_f().pack(_x))
        _v23 = val1.y
        _x = _v23.data
        buff.write(_get_struct_f().pack(_x))
        _v24 = val1.z
        _x = _v24.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.supplementinfo.history_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.history_velocity:
        _v25 = val1.x
        _x = _v25.data
        buff.write(_get_struct_f().pack(_x))
        _v26 = val1.y
        _x = _v26.data
        buff.write(_get_struct_f().pack(_x))
        _v27 = val1.z
        _x = _v27.data
        buff.write(_get_struct_f().pack(_x))
      length = len(self.supplementinfo.history_type)
      buff.write(_struct_I.pack(length))
      for val1 in self.supplementinfo.history_type:
        _x = val1.data
        buff.write(_get_struct_i().pack(_x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.supplementinfo.gps_mode.data, _x.supplementinfo.gps_info.x.data, _x.supplementinfo.gps_info.y.data, _x.supplementinfo.gps_info.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coreinfo is None:
        self.coreinfo = all_msgs.msg.CoreInfo()
      if self.hassupplmentinfo is None:
        self.hassupplmentinfo = std_msgs.msg.Bool()
      if self.supplementinfo is None:
        self.supplementinfo = all_msgs.msg.SupplementInfo()
      end = 0
      _x = self
      start = end
      end += 213
      (_x.coreinfo.timestamp.data, _x.coreinfo.priority_id.data, _x.coreinfo.exist_confidence.data, _x.coreinfo.center.x.data, _x.coreinfo.center.y.data, _x.coreinfo.center.z.data, _x.coreinfo.center_cov.x.data, _x.coreinfo.center_cov.y.data, _x.coreinfo.center_cov.z.data, _x.coreinfo.size.x.data, _x.coreinfo.size.y.data, _x.coreinfo.size.z.data, _x.coreinfo.size_cov.x.data, _x.coreinfo.size_cov.y.data, _x.coreinfo.size_cov.z.data, _x.coreinfo.direction.x.data, _x.coreinfo.direction.y.data, _x.coreinfo.direction.z.data, _x.coreinfo.direction_cov.x.data, _x.coreinfo.direction_cov.y.data, _x.coreinfo.direction_cov.z.data, _x.coreinfo.type.data, _x.coreinfo.type_confidence.data, _x.coreinfo.attention_type.data, _x.coreinfo.motion_state.data, _x.coreinfo.lane_pos.data, _x.coreinfo.trakcer_id.data, _x.coreinfo.age.data, _x.coreinfo.velocity.x.data, _x.coreinfo.velocity.y.data, _x.coreinfo.velocity.z.data, _x.coreinfo.velocity_cov.x.data, _x.coreinfo.velocity_cov.y.data, _x.coreinfo.velocity_cov.z.data, _x.coreinfo.acceleration.x.data, _x.coreinfo.acceleration.y.data, _x.coreinfo.acceleration.z.data, _x.coreinfo.acceleration_cov.x.data, _x.coreinfo.acceleration_cov.y.data, _x.coreinfo.acceleration_cov.z.data, _x.coreinfo.angle_velocity.data, _x.coreinfo.angle_velocity_cov.data, _x.coreinfo.angle_acceleration.data, _x.coreinfo.angle_acceleration_cov.data, _x.coreinfo.anchor.x.data, _x.coreinfo.anchor.y.data, _x.coreinfo.anchor.z.data, _x.coreinfo.nearest_point.x.data, _x.coreinfo.nearest_point.y.data, _x.coreinfo.nearest_point.z.data, _x.hassupplmentinfo.data, _x.supplementinfo.unique_id.data,) = _get_struct_di19fif4id22fBI().unpack(str[start:end])
      self.hassupplmentinfo.data = bool(self.hassupplmentinfo.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.polygon = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v28 = val1.x
        start = end
        end += 4
        (_v28.data,) = _get_struct_f().unpack(str[start:end])
        _v29 = val1.y
        start = end
        end += 4
        (_v29.data,) = _get_struct_f().unpack(str[start:end])
        _v30 = val1.z
        start = end
        end += 4
        (_v30.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.polygon.append(val1)
      _x = self
      start = end
      end += 8
      (_x.supplementinfo.left_point_index.data, _x.supplementinfo.right_point_index.data,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.cloud_indices = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.supplementinfo.cloud_indices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.latent_types = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.latent_types.append(val1)
      _x = self
      start = end
      end += 37
      (_x.supplementinfo.size_type.data, _x.supplementinfo.mode.data, _x.supplementinfo.in_roi.data, _x.supplementinfo.tracking_state.data, _x.supplementinfo.geo_center.x.data, _x.supplementinfo.geo_center.y.data, _x.supplementinfo.geo_center.z.data, _x.supplementinfo.geo_size.x.data, _x.supplementinfo.geo_size.y.data, _x.supplementinfo.geo_size.z.data,) = _get_struct_2iBi6f().unpack(str[start:end])
      self.supplementinfo.in_roi.data = bool(self.supplementinfo.in_roi.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.trajectory = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v31 = val1.x
        start = end
        end += 4
        (_v31.data,) = _get_struct_f().unpack(str[start:end])
        _v32 = val1.y
        start = end
        end += 4
        (_v32.data,) = _get_struct_f().unpack(str[start:end])
        _v33 = val1.z
        start = end
        end += 4
        (_v33.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.history_velocity = []
      for i in range(0, length):
        val1 = all_msgs.msg.Point3f()
        _v34 = val1.x
        start = end
        end += 4
        (_v34.data,) = _get_struct_f().unpack(str[start:end])
        _v35 = val1.y
        start = end
        end += 4
        (_v35.data,) = _get_struct_f().unpack(str[start:end])
        _v36 = val1.z
        start = end
        end += 4
        (_v36.data,) = _get_struct_f().unpack(str[start:end])
        self.supplementinfo.history_velocity.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.supplementinfo.history_type = []
      for i in range(0, length):
        val1 = std_msgs.msg.Int32()
        start = end
        end += 4
        (val1.data,) = _get_struct_i().unpack(str[start:end])
        self.supplementinfo.history_type.append(val1)
      _x = self
      start = end
      end += 28
      (_x.supplementinfo.gps_mode.data, _x.supplementinfo.gps_info.x.data, _x.supplementinfo.gps_info.y.data, _x.supplementinfo.gps_info.z.data,) = _get_struct_i3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2iBi6f = None
def _get_struct_2iBi6f():
    global _struct_2iBi6f
    if _struct_2iBi6f is None:
        _struct_2iBi6f = struct.Struct("<2iBi6f")
    return _struct_2iBi6f
_struct_di19fif4id22fBI = None
def _get_struct_di19fif4id22fBI():
    global _struct_di19fif4id22fBI
    if _struct_di19fif4id22fBI is None:
        _struct_di19fif4id22fBI = struct.Struct("<di19fif4id22fBI")
    return _struct_di19fif4id22fBI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
