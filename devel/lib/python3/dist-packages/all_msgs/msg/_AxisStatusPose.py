# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/AxisStatusPose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class AxisStatusPose(genpy.Message):
  _md5sum = "1987389e84dad24c41bcd78726580d20"
  _type = "all_msgs/AxisStatusPose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Int32 status 
Pose           pose 
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: all_msgs/Pose
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z 

std_msgs/Float32 roll 
std_msgs/Float32 pitch
std_msgs/Float32 yaw

std_msgs/Int32 status 

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['status','pose']
  _slot_types = ['std_msgs/Int32','all_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AxisStatusPose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = std_msgs.msg.Int32()
      if self.pose is None:
        self.pose = all_msgs.msg.Pose()
    else:
      self.status = std_msgs.msg.Int32()
      self.pose = all_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6fi().pack(_x.status.data, _x.pose.x.data, _x.pose.y.data, _x.pose.z.data, _x.pose.roll.data, _x.pose.pitch.data, _x.pose.yaw.data, _x.pose.status.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = std_msgs.msg.Int32()
      if self.pose is None:
        self.pose = all_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.status.data, _x.pose.x.data, _x.pose.y.data, _x.pose.z.data, _x.pose.roll.data, _x.pose.pitch.data, _x.pose.yaw.data, _x.pose.status.data,) = _get_struct_i6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6fi().pack(_x.status.data, _x.pose.x.data, _x.pose.y.data, _x.pose.z.data, _x.pose.roll.data, _x.pose.pitch.data, _x.pose.yaw.data, _x.pose.status.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.status is None:
        self.status = std_msgs.msg.Int32()
      if self.pose is None:
        self.pose = all_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.status.data, _x.pose.x.data, _x.pose.y.data, _x.pose.z.data, _x.pose.roll.data, _x.pose.pitch.data, _x.pose.yaw.data, _x.pose.status.data,) = _get_struct_i6fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i6fi = None
def _get_struct_i6fi():
    global _struct_i6fi
    if _struct_i6fi is None:
        _struct_i6fi = struct.Struct("<i6fi")
    return _struct_i6fi
