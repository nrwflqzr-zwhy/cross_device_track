# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from all_msgs/CoreInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import all_msgs.msg
import std_msgs.msg

class CoreInfo(genpy.Message):
  _md5sum = "7f0ff990bf278ab87b544233b3a79e70"
  _type = "all_msgs/CoreInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64 timestamp

std_msgs/Int32 priority_id
std_msgs/Float32 exist_confidence 
Point3f          center 
Point3f          center_cov 
Point3f          size 
Point3f          size_cov 
Point3f          direction 
Point3f          direction_cov         
std_msgs/Int32   type 
std_msgs/Float32 type_confidence 
std_msgs/Int32   attention_type 
std_msgs/Int32   motion_state
std_msgs/Int32   lane_pos
std_msgs/Int32   trakcer_id 
std_msgs/Float64 age 
Point3f          velocity 
Point3f          velocity_cov 
Point3f          acceleration 
Point3f          acceleration_cov 
std_msgs/Float32 angle_velocity 
std_msgs/Float32 angle_velocity_cov 
std_msgs/Float32 angle_acceleration 
std_msgs/Float32 angle_acceleration_cov  
Point3f          anchor 
Point3f          nearest_point 


================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: all_msgs/Point3f
std_msgs/Float32 x 
std_msgs/Float32 y 
std_msgs/Float32 z """
  __slots__ = ['timestamp','priority_id','exist_confidence','center','center_cov','size','size_cov','direction','direction_cov','type','type_confidence','attention_type','motion_state','lane_pos','trakcer_id','age','velocity','velocity_cov','acceleration','acceleration_cov','angle_velocity','angle_velocity_cov','angle_acceleration','angle_acceleration_cov','anchor','nearest_point']
  _slot_types = ['std_msgs/Float64','std_msgs/Int32','std_msgs/Float32','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','std_msgs/Int32','std_msgs/Float32','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32','std_msgs/Int32','std_msgs/Float64','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','all_msgs/Point3f','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','all_msgs/Point3f','all_msgs/Point3f']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,priority_id,exist_confidence,center,center_cov,size,size_cov,direction,direction_cov,type,type_confidence,attention_type,motion_state,lane_pos,trakcer_id,age,velocity,velocity_cov,acceleration,acceleration_cov,angle_velocity,angle_velocity_cov,angle_acceleration,angle_acceleration_cov,anchor,nearest_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CoreInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.priority_id is None:
        self.priority_id = std_msgs.msg.Int32()
      if self.exist_confidence is None:
        self.exist_confidence = std_msgs.msg.Float32()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.center_cov is None:
        self.center_cov = all_msgs.msg.Point3f()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.size_cov is None:
        self.size_cov = all_msgs.msg.Point3f()
      if self.direction is None:
        self.direction = all_msgs.msg.Point3f()
      if self.direction_cov is None:
        self.direction_cov = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.type_confidence is None:
        self.type_confidence = std_msgs.msg.Float32()
      if self.attention_type is None:
        self.attention_type = std_msgs.msg.Int32()
      if self.motion_state is None:
        self.motion_state = std_msgs.msg.Int32()
      if self.lane_pos is None:
        self.lane_pos = std_msgs.msg.Int32()
      if self.trakcer_id is None:
        self.trakcer_id = std_msgs.msg.Int32()
      if self.age is None:
        self.age = std_msgs.msg.Float64()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.velocity_cov is None:
        self.velocity_cov = all_msgs.msg.Point3f()
      if self.acceleration is None:
        self.acceleration = all_msgs.msg.Point3f()
      if self.acceleration_cov is None:
        self.acceleration_cov = all_msgs.msg.Point3f()
      if self.angle_velocity is None:
        self.angle_velocity = std_msgs.msg.Float32()
      if self.angle_velocity_cov is None:
        self.angle_velocity_cov = std_msgs.msg.Float32()
      if self.angle_acceleration is None:
        self.angle_acceleration = std_msgs.msg.Float32()
      if self.angle_acceleration_cov is None:
        self.angle_acceleration_cov = std_msgs.msg.Float32()
      if self.anchor is None:
        self.anchor = all_msgs.msg.Point3f()
      if self.nearest_point is None:
        self.nearest_point = all_msgs.msg.Point3f()
    else:
      self.timestamp = std_msgs.msg.Float64()
      self.priority_id = std_msgs.msg.Int32()
      self.exist_confidence = std_msgs.msg.Float32()
      self.center = all_msgs.msg.Point3f()
      self.center_cov = all_msgs.msg.Point3f()
      self.size = all_msgs.msg.Point3f()
      self.size_cov = all_msgs.msg.Point3f()
      self.direction = all_msgs.msg.Point3f()
      self.direction_cov = all_msgs.msg.Point3f()
      self.type = std_msgs.msg.Int32()
      self.type_confidence = std_msgs.msg.Float32()
      self.attention_type = std_msgs.msg.Int32()
      self.motion_state = std_msgs.msg.Int32()
      self.lane_pos = std_msgs.msg.Int32()
      self.trakcer_id = std_msgs.msg.Int32()
      self.age = std_msgs.msg.Float64()
      self.velocity = all_msgs.msg.Point3f()
      self.velocity_cov = all_msgs.msg.Point3f()
      self.acceleration = all_msgs.msg.Point3f()
      self.acceleration_cov = all_msgs.msg.Point3f()
      self.angle_velocity = std_msgs.msg.Float32()
      self.angle_velocity_cov = std_msgs.msg.Float32()
      self.angle_acceleration = std_msgs.msg.Float32()
      self.angle_acceleration_cov = std_msgs.msg.Float32()
      self.anchor = all_msgs.msg.Point3f()
      self.nearest_point = all_msgs.msg.Point3f()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_di19fif4id22f().pack(_x.timestamp.data, _x.priority_id.data, _x.exist_confidence.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.center_cov.x.data, _x.center_cov.y.data, _x.center_cov.z.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.size_cov.x.data, _x.size_cov.y.data, _x.size_cov.z.data, _x.direction.x.data, _x.direction.y.data, _x.direction.z.data, _x.direction_cov.x.data, _x.direction_cov.y.data, _x.direction_cov.z.data, _x.type.data, _x.type_confidence.data, _x.attention_type.data, _x.motion_state.data, _x.lane_pos.data, _x.trakcer_id.data, _x.age.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.velocity_cov.x.data, _x.velocity_cov.y.data, _x.velocity_cov.z.data, _x.acceleration.x.data, _x.acceleration.y.data, _x.acceleration.z.data, _x.acceleration_cov.x.data, _x.acceleration_cov.y.data, _x.acceleration_cov.z.data, _x.angle_velocity.data, _x.angle_velocity_cov.data, _x.angle_acceleration.data, _x.angle_acceleration_cov.data, _x.anchor.x.data, _x.anchor.y.data, _x.anchor.z.data, _x.nearest_point.x.data, _x.nearest_point.y.data, _x.nearest_point.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.priority_id is None:
        self.priority_id = std_msgs.msg.Int32()
      if self.exist_confidence is None:
        self.exist_confidence = std_msgs.msg.Float32()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.center_cov is None:
        self.center_cov = all_msgs.msg.Point3f()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.size_cov is None:
        self.size_cov = all_msgs.msg.Point3f()
      if self.direction is None:
        self.direction = all_msgs.msg.Point3f()
      if self.direction_cov is None:
        self.direction_cov = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.type_confidence is None:
        self.type_confidence = std_msgs.msg.Float32()
      if self.attention_type is None:
        self.attention_type = std_msgs.msg.Int32()
      if self.motion_state is None:
        self.motion_state = std_msgs.msg.Int32()
      if self.lane_pos is None:
        self.lane_pos = std_msgs.msg.Int32()
      if self.trakcer_id is None:
        self.trakcer_id = std_msgs.msg.Int32()
      if self.age is None:
        self.age = std_msgs.msg.Float64()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.velocity_cov is None:
        self.velocity_cov = all_msgs.msg.Point3f()
      if self.acceleration is None:
        self.acceleration = all_msgs.msg.Point3f()
      if self.acceleration_cov is None:
        self.acceleration_cov = all_msgs.msg.Point3f()
      if self.angle_velocity is None:
        self.angle_velocity = std_msgs.msg.Float32()
      if self.angle_velocity_cov is None:
        self.angle_velocity_cov = std_msgs.msg.Float32()
      if self.angle_acceleration is None:
        self.angle_acceleration = std_msgs.msg.Float32()
      if self.angle_acceleration_cov is None:
        self.angle_acceleration_cov = std_msgs.msg.Float32()
      if self.anchor is None:
        self.anchor = all_msgs.msg.Point3f()
      if self.nearest_point is None:
        self.nearest_point = all_msgs.msg.Point3f()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.timestamp.data, _x.priority_id.data, _x.exist_confidence.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.center_cov.x.data, _x.center_cov.y.data, _x.center_cov.z.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.size_cov.x.data, _x.size_cov.y.data, _x.size_cov.z.data, _x.direction.x.data, _x.direction.y.data, _x.direction.z.data, _x.direction_cov.x.data, _x.direction_cov.y.data, _x.direction_cov.z.data, _x.type.data, _x.type_confidence.data, _x.attention_type.data, _x.motion_state.data, _x.lane_pos.data, _x.trakcer_id.data, _x.age.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.velocity_cov.x.data, _x.velocity_cov.y.data, _x.velocity_cov.z.data, _x.acceleration.x.data, _x.acceleration.y.data, _x.acceleration.z.data, _x.acceleration_cov.x.data, _x.acceleration_cov.y.data, _x.acceleration_cov.z.data, _x.angle_velocity.data, _x.angle_velocity_cov.data, _x.angle_acceleration.data, _x.angle_acceleration_cov.data, _x.anchor.x.data, _x.anchor.y.data, _x.anchor.z.data, _x.nearest_point.x.data, _x.nearest_point.y.data, _x.nearest_point.z.data,) = _get_struct_di19fif4id22f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_di19fif4id22f().pack(_x.timestamp.data, _x.priority_id.data, _x.exist_confidence.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.center_cov.x.data, _x.center_cov.y.data, _x.center_cov.z.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.size_cov.x.data, _x.size_cov.y.data, _x.size_cov.z.data, _x.direction.x.data, _x.direction.y.data, _x.direction.z.data, _x.direction_cov.x.data, _x.direction_cov.y.data, _x.direction_cov.z.data, _x.type.data, _x.type_confidence.data, _x.attention_type.data, _x.motion_state.data, _x.lane_pos.data, _x.trakcer_id.data, _x.age.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.velocity_cov.x.data, _x.velocity_cov.y.data, _x.velocity_cov.z.data, _x.acceleration.x.data, _x.acceleration.y.data, _x.acceleration.z.data, _x.acceleration_cov.x.data, _x.acceleration_cov.y.data, _x.acceleration_cov.z.data, _x.angle_velocity.data, _x.angle_velocity_cov.data, _x.angle_acceleration.data, _x.angle_acceleration_cov.data, _x.anchor.x.data, _x.anchor.y.data, _x.anchor.z.data, _x.nearest_point.x.data, _x.nearest_point.y.data, _x.nearest_point.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.Float64()
      if self.priority_id is None:
        self.priority_id = std_msgs.msg.Int32()
      if self.exist_confidence is None:
        self.exist_confidence = std_msgs.msg.Float32()
      if self.center is None:
        self.center = all_msgs.msg.Point3f()
      if self.center_cov is None:
        self.center_cov = all_msgs.msg.Point3f()
      if self.size is None:
        self.size = all_msgs.msg.Point3f()
      if self.size_cov is None:
        self.size_cov = all_msgs.msg.Point3f()
      if self.direction is None:
        self.direction = all_msgs.msg.Point3f()
      if self.direction_cov is None:
        self.direction_cov = all_msgs.msg.Point3f()
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.type_confidence is None:
        self.type_confidence = std_msgs.msg.Float32()
      if self.attention_type is None:
        self.attention_type = std_msgs.msg.Int32()
      if self.motion_state is None:
        self.motion_state = std_msgs.msg.Int32()
      if self.lane_pos is None:
        self.lane_pos = std_msgs.msg.Int32()
      if self.trakcer_id is None:
        self.trakcer_id = std_msgs.msg.Int32()
      if self.age is None:
        self.age = std_msgs.msg.Float64()
      if self.velocity is None:
        self.velocity = all_msgs.msg.Point3f()
      if self.velocity_cov is None:
        self.velocity_cov = all_msgs.msg.Point3f()
      if self.acceleration is None:
        self.acceleration = all_msgs.msg.Point3f()
      if self.acceleration_cov is None:
        self.acceleration_cov = all_msgs.msg.Point3f()
      if self.angle_velocity is None:
        self.angle_velocity = std_msgs.msg.Float32()
      if self.angle_velocity_cov is None:
        self.angle_velocity_cov = std_msgs.msg.Float32()
      if self.angle_acceleration is None:
        self.angle_acceleration = std_msgs.msg.Float32()
      if self.angle_acceleration_cov is None:
        self.angle_acceleration_cov = std_msgs.msg.Float32()
      if self.anchor is None:
        self.anchor = all_msgs.msg.Point3f()
      if self.nearest_point is None:
        self.nearest_point = all_msgs.msg.Point3f()
      end = 0
      _x = self
      start = end
      end += 208
      (_x.timestamp.data, _x.priority_id.data, _x.exist_confidence.data, _x.center.x.data, _x.center.y.data, _x.center.z.data, _x.center_cov.x.data, _x.center_cov.y.data, _x.center_cov.z.data, _x.size.x.data, _x.size.y.data, _x.size.z.data, _x.size_cov.x.data, _x.size_cov.y.data, _x.size_cov.z.data, _x.direction.x.data, _x.direction.y.data, _x.direction.z.data, _x.direction_cov.x.data, _x.direction_cov.y.data, _x.direction_cov.z.data, _x.type.data, _x.type_confidence.data, _x.attention_type.data, _x.motion_state.data, _x.lane_pos.data, _x.trakcer_id.data, _x.age.data, _x.velocity.x.data, _x.velocity.y.data, _x.velocity.z.data, _x.velocity_cov.x.data, _x.velocity_cov.y.data, _x.velocity_cov.z.data, _x.acceleration.x.data, _x.acceleration.y.data, _x.acceleration.z.data, _x.acceleration_cov.x.data, _x.acceleration_cov.y.data, _x.acceleration_cov.z.data, _x.angle_velocity.data, _x.angle_velocity_cov.data, _x.angle_acceleration.data, _x.angle_acceleration_cov.data, _x.anchor.x.data, _x.anchor.y.data, _x.anchor.z.data, _x.nearest_point.x.data, _x.nearest_point.y.data, _x.nearest_point.z.data,) = _get_struct_di19fif4id22f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_di19fif4id22f = None
def _get_struct_di19fif4id22f():
    global _struct_di19fif4id22f
    if _struct_di19fif4id22f is None:
        _struct_di19fif4id22f = struct.Struct("<di19fif4id22f")
    return _struct_di19fif4id22f
