// Generated by gencpp from file all_msgs/TransResult.msg
// DO NOT EDIT!


#ifndef ALL_MSGS_MESSAGE_TRANSRESULT_H
#define ALL_MSGS_MESSAGE_TRANSRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Float64.h>
#include <all_msgs/Point3f.h>
#include <all_msgs/Point3f.h>
#include <all_msgs/Point3f.h>
#include <std_msgs/Int32.h>
#include <std_msgs/String.h>

namespace all_msgs
{
template <class ContainerAllocator>
struct TransResult_
{
  typedef TransResult_<ContainerAllocator> Type;

  TransResult_()
    : header()
    , timestamp()
    , size()
    , center()
    , velocity()
    , type()
    , detection_name()
    , ct()
    , tracking()
    , label_preds(0)
    , tracking_id(0)
    , age(0)
    , active(0)  {
    }
  TransResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp(_alloc)
    , size(_alloc)
    , center(_alloc)
    , velocity(_alloc)
    , type(_alloc)
    , detection_name(_alloc)
    , ct(_alloc)
    , tracking(_alloc)
    , label_preds(0)
    , tracking_id(0)
    , age(0)
    , active(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::all_msgs::Point3f_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::all_msgs::Point3f_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::all_msgs::Point3f_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::String_<ContainerAllocator>  _detection_name_type;
  _detection_name_type detection_name;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _ct_type;
  _ct_type ct;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _tracking_type;
  _tracking_type tracking;

   typedef int32_t _label_preds_type;
  _label_preds_type label_preds;

   typedef int32_t _tracking_id_type;
  _tracking_id_type tracking_id;

   typedef int32_t _age_type;
  _age_type age;

   typedef int32_t _active_type;
  _active_type active;





  typedef boost::shared_ptr< ::all_msgs::TransResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::all_msgs::TransResult_<ContainerAllocator> const> ConstPtr;

}; // struct TransResult_

typedef ::all_msgs::TransResult_<std::allocator<void> > TransResult;

typedef boost::shared_ptr< ::all_msgs::TransResult > TransResultPtr;
typedef boost::shared_ptr< ::all_msgs::TransResult const> TransResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::all_msgs::TransResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::all_msgs::TransResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::all_msgs::TransResult_<ContainerAllocator1> & lhs, const ::all_msgs::TransResult_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.timestamp == rhs.timestamp &&
    lhs.size == rhs.size &&
    lhs.center == rhs.center &&
    lhs.velocity == rhs.velocity &&
    lhs.type == rhs.type &&
    lhs.detection_name == rhs.detection_name &&
    lhs.ct == rhs.ct &&
    lhs.tracking == rhs.tracking &&
    lhs.label_preds == rhs.label_preds &&
    lhs.tracking_id == rhs.tracking_id &&
    lhs.age == rhs.age &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::all_msgs::TransResult_<ContainerAllocator1> & lhs, const ::all_msgs::TransResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace all_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::all_msgs::TransResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::all_msgs::TransResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::TransResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::TransResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::TransResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::TransResult_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::all_msgs::TransResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "306dc6cbac8c1352da94701707ad2094";
  }

  static const char* value(const ::all_msgs::TransResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x306dc6cbac8c1352ULL;
  static const uint64_t static_value2 = 0xda94701707ad2094ULL;
};

template<class ContainerAllocator>
struct DataType< ::all_msgs::TransResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "all_msgs/TransResult";
  }

  static const char* value(const ::all_msgs::TransResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::all_msgs::TransResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"std_msgs/Float64 timestamp \n"
"Point3f          size \n"
"Point3f          center \n"
"Point3f          velocity\n"
"std_msgs/Int32   type \n"
"std_msgs/String detection_name\n"
"int32[] ct\n"
"int32[] tracking\n"
"int32 label_preds\n"
"int32 tracking_id\n"
"int32 age\n"
"int32 active\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: all_msgs/Point3f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::all_msgs::TransResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::all_msgs::TransResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.size);
      stream.next(m.center);
      stream.next(m.velocity);
      stream.next(m.type);
      stream.next(m.detection_name);
      stream.next(m.ct);
      stream.next(m.tracking);
      stream.next(m.label_preds);
      stream.next(m.tracking_id);
      stream.next(m.age);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::all_msgs::TransResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::all_msgs::TransResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.timestamp);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::all_msgs::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::all_msgs::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::all_msgs::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "detection_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.detection_name);
    s << indent << "ct[]" << std::endl;
    for (size_t i = 0; i < v.ct.size(); ++i)
    {
      s << indent << "  ct[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ct[i]);
    }
    s << indent << "tracking[]" << std::endl;
    for (size_t i = 0; i < v.tracking.size(); ++i)
    {
      s << indent << "  tracking[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tracking[i]);
    }
    s << indent << "label_preds: ";
    Printer<int32_t>::stream(s, indent + "  ", v.label_preds);
    s << indent << "tracking_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracking_id);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "active: ";
    Printer<int32_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALL_MSGS_MESSAGE_TRANSRESULT_H
