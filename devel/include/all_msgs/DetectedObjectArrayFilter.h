// Generated by gencpp from file all_msgs/DetectedObjectArrayFilter.msg
// DO NOT EDIT!


#ifndef ALL_MSGS_MESSAGE_DETECTEDOBJECTARRAYFILTER_H
#define ALL_MSGS_MESSAGE_DETECTEDOBJECTARRAYFILTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <all_msgs/DetectedObject.h>

namespace all_msgs
{
template <class ContainerAllocator>
struct DetectedObjectArrayFilter_
{
  typedef DetectedObjectArrayFilter_<ContainerAllocator> Type;

  DetectedObjectArrayFilter_()
    : timeStamp()
    , objects()
    , outRange()  {
    }
  DetectedObjectArrayFilter_(const ContainerAllocator& _alloc)
    : timeStamp()
    , objects(_alloc)
    , outRange(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef std::vector< ::all_msgs::DetectedObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::all_msgs::DetectedObject_<ContainerAllocator> >> _objects_type;
  _objects_type objects;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _outRange_type;
  _outRange_type outRange;





  typedef boost::shared_ptr< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObjectArrayFilter_

typedef ::all_msgs::DetectedObjectArrayFilter_<std::allocator<void> > DetectedObjectArrayFilter;

typedef boost::shared_ptr< ::all_msgs::DetectedObjectArrayFilter > DetectedObjectArrayFilterPtr;
typedef boost::shared_ptr< ::all_msgs::DetectedObjectArrayFilter const> DetectedObjectArrayFilterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator1> & lhs, const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator2> & rhs)
{
  return lhs.timeStamp == rhs.timeStamp &&
    lhs.objects == rhs.objects &&
    lhs.outRange == rhs.outRange;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator1> & lhs, const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace all_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16bfdcf016f4d573ea2bc95caacb496e";
  }

  static const char* value(const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16bfdcf016f4d573ULL;
  static const uint64_t static_value2 = 0xea2bc95caacb496eULL;
};

template<class ContainerAllocator>
struct DataType< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "all_msgs/DetectedObjectArrayFilter";
  }

  static const char* value(const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time             timeStamp  ##### 消息推送时间戳\n"
"DetectedObject[] objects    ##### 目标列表\n"
"uint32[] outRange ####超出范围的人员或车辆列表\n"
"\n"
"\n"
"================================================================================\n"
"MSG: all_msgs/DetectedObject\n"
"std_msgs/Header    header\n"
"\n"
"uint32             id    ## target id\n"
"string             type  ## target type\n"
"float32            score ## confidence score\n"
"\n"
"float64            x     ## target coordinates\n"
"float64            y\n"
"float64            z\n"
"\n"
"float64            vx    ## target velocity\n"
"float64            vy\n"
"float64            vz\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.objects);
      stream.next(m.outRange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObjectArrayFilter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::all_msgs::DetectedObjectArrayFilter_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::all_msgs::DetectedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "outRange[]" << std::endl;
    for (size_t i = 0; i < v.outRange.size(); ++i)
    {
      s << indent << "  outRange[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.outRange[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALL_MSGS_MESSAGE_DETECTEDOBJECTARRAYFILTER_H
