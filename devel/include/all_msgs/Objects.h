// Generated by gencpp from file all_msgs/Objects.msg
// DO NOT EDIT!


#ifndef ALL_MSGS_MESSAGE_OBJECTS_H
#define ALL_MSGS_MESSAGE_OBJECTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <all_msgs/Object.h>

namespace all_msgs
{
template <class ContainerAllocator>
struct Objects_
{
  typedef Objects_<ContainerAllocator> Type;

  Objects_()
    : objects()  {
    }
  Objects_(const ContainerAllocator& _alloc)
    : objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::all_msgs::Object_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::all_msgs::Object_<ContainerAllocator> >> _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::all_msgs::Objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::all_msgs::Objects_<ContainerAllocator> const> ConstPtr;

}; // struct Objects_

typedef ::all_msgs::Objects_<std::allocator<void> > Objects;

typedef boost::shared_ptr< ::all_msgs::Objects > ObjectsPtr;
typedef boost::shared_ptr< ::all_msgs::Objects const> ObjectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::all_msgs::Objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::all_msgs::Objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::all_msgs::Objects_<ContainerAllocator1> & lhs, const ::all_msgs::Objects_<ContainerAllocator2> & rhs)
{
  return lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::all_msgs::Objects_<ContainerAllocator1> & lhs, const ::all_msgs::Objects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace all_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::all_msgs::Objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::all_msgs::Objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::Objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::all_msgs::Objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::Objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::all_msgs::Objects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::all_msgs::Objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af808db5c14ee51e1e18c9cd6b126641";
  }

  static const char* value(const ::all_msgs::Objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf808db5c14ee51eULL;
  static const uint64_t static_value2 = 0x1e18c9cd6b126641ULL;
};

template<class ContainerAllocator>
struct DataType< ::all_msgs::Objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "all_msgs/Objects";
  }

  static const char* value(const ::all_msgs::Objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::all_msgs::Objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Object[]         objects\n"
"================================================================================\n"
"MSG: all_msgs/Object\n"
"CoreInfo coreinfo\n"
"std_msgs/Bool  hassupplmentinfo \n"
"SupplementInfo supplementinfo \n"
"\n"
"================================================================================\n"
"MSG: all_msgs/CoreInfo\n"
"std_msgs/Float64 timestamp\n"
"\n"
"std_msgs/Int32 priority_id\n"
"std_msgs/Float32 exist_confidence \n"
"Point3f          center \n"
"Point3f          center_cov \n"
"Point3f          size \n"
"Point3f          size_cov \n"
"Point3f          direction \n"
"Point3f          direction_cov         \n"
"std_msgs/Int32   type \n"
"std_msgs/Float32 type_confidence \n"
"std_msgs/Int32   attention_type \n"
"std_msgs/Int32   motion_state\n"
"std_msgs/Int32   lane_pos\n"
"std_msgs/Int32   trakcer_id \n"
"std_msgs/Float64 age \n"
"Point3f          velocity \n"
"Point3f          velocity_cov \n"
"Point3f          acceleration \n"
"Point3f          acceleration_cov \n"
"std_msgs/Float32 angle_velocity \n"
"std_msgs/Float32 angle_velocity_cov \n"
"std_msgs/Float32 angle_acceleration \n"
"std_msgs/Float32 angle_acceleration_cov  \n"
"Point3f          anchor \n"
"Point3f          nearest_point \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: all_msgs/Point3f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: all_msgs/SupplementInfo\n"
"std_msgs/UInt32     unique_id\n"
"\n"
"Point3f[]           polygon\n"
"std_msgs/Int32      left_point_index \n"
"std_msgs/Int32      right_point_index \n"
"\n"
"std_msgs/Int32[]    cloud_indices\n"
"\n"
"std_msgs/Float32[]  latent_types\n"
"std_msgs/Int32      size_type \n"
"std_msgs/Int32      mode \n"
"std_msgs/Bool       in_roi \n"
"std_msgs/Int32      tracking_state\n"
"Point3f             geo_center \n"
"Point3f             geo_size \n"
"\n"
"\n"
"\n"
"Point3f[]           trajectory \n"
"Point3f[]           history_velocity\n"
"std_msgs/Int32[]    history_type \n"
"std_msgs/Int32      gps_mode \n"
"Point3d             gps_info \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: all_msgs/Point3d\n"
"std_msgs/Float64 x \n"
"std_msgs/Float64 y \n"
"std_msgs/Float64 z \n"
;
  }

  static const char* value(const ::all_msgs::Objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::all_msgs::Objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::all_msgs::Objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::all_msgs::Objects_<ContainerAllocator>& v)
  {
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::all_msgs::Object_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALL_MSGS_MESSAGE_OBJECTS_H
